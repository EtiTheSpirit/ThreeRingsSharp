<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XDataTree</name>
    </assembly>
    <members>
        <member name="T:XDataTree.Data.SilkImage">
            <summary>
            An enum that represents the available icons in the data tree. Certain images are not part of the stock Silk image package.<para/>
            Silk Images come from https://famfamfam.com/ <para/>
            To determine the icon of a TreeNode, simply cast one of these enums to an int and set ImageIndex to the int value. As such, this requires that the indices
            of images in the TreeNode (see WinForms editor) match up to these.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Generic">
            <summary>
            A blue square representing a generic object. Intended to represent an object of an unknown type.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Object">
            <summary>
            An icon of a data tree with a single parent object containing two children. An alternative to <see cref="F:XDataTree.Data.SilkImage.Generic"/> that serves the same purpose.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Scene">
            <summary>
            A picture of a the globe, intended to represent an entire scene.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Sky">
            <summary>
            A picture of the sky, intended to represent a skybox object.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Model">
            <summary>
            A wooden box representing an entire model. Intended to represent a model.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.ModelSet">
            <summary>
            A set of three bricks, each with a unique color. Intended to represent a set of several models grouped together.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Articulated">
            <summary>
            An icon of a person. Intended to represent articulated models, which have bones and often animations, specifically an ArticulatedConfig.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Billboard">
            <summary>
            An icon of an application window. Intended to represent a billboard GUI element.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Static">
            <summary>
            A single building brick. Intended to represent a static model (just geometry and nothing else), specifically a StaticConfig.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.MergedStatic">
            <summary>
            A set of three building bricks. Intended to represent a bulk collection of several static models, specifically a MergedStaticConfig.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Sound">
            <summary>
            A picture of a speaker. Intended to represent a sound emitter object.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.SoundWarning">
            <summary>
            A picture of a speaker with a warning icon in the lower right. Intended to represent the inability to load a sound.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Attachment">
            <summary>
            A picture of an electric plug. Intended to represent an external object that attaches to another model in its current context, for instance, the Thwacker Gremlin model has an attachment for their hammer. The hammer should use this icon in this context.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Derived">
            <summary>
            A picture of two objects with arrows pointing between them. Intended to represent a derived model class, specifically a ModelConfig.Derived.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Conditional">
            <summary>
            A picture of an arrow that diverges. Intended to represent an element that determines conditional attributes in gameplay, specifically a ConditionalConfig.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.CameraBolt">
            <summary>
            A picture of a camera with a small lightning bolt in the lower right corner. Intended to represent something that affects rendering in some way, or a visual effect.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Generated">
            <summary>
            A picture of a PC with a small plus symbol in the lower right corner. Intended to represent a model that is generated on the fly from a set of parameters.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Schemed">
            <summary>
            A picture of an application window with a small pencil in the lower right corner. Intended to represent a schemed object, specifically a ModelConfig.Schemed.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.SchemedModel">
            <summary>
            A picture of a single building brick with a small pencil in the lower right corner. Intended to represent a schemed model, specifically a ModelConfig.SchemedModel.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Scheme">
            <summary>
            A picture of a computer monitor with a small pencil in the lower right corner. This is intended to represent an actual render scheme. This should be used on any instances of a class like ViewerEffectConfig that have no model reference and are direct descendants to a ModelConfig.Schemed.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Animation">
            <summary>
            A picture of a snippet of film. Intended to represent an animation, specifically a AnimationConfig.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Scripted">
            <summary>
            Intended to represent a scene object that has code running within it, usually for gameplay purposes.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.TimeAction">
            <summary>
            Intended to represent an extension of <see cref="F:XDataTree.Data.SilkImage.Scripted"/> that runs on a timer ScriptedConfig.TimeAction
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Config">
            <summary>
            A generic icon of a cog. Used for any extra data that is best described as configuration data.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Shading">
            <summary>
            A generic icon of diagonal hashes. Internally this is used to represent fog.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Reference">
            <summary>
            An icon of a hand pointing to a miniature variant of <see cref="F:XDataTree.Data.SilkImage.ModelSet"/>, intended to represent an external reference to another model.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Array">
            <summary>
            An icon of a piece of paper with a blue &lt;&gt; pattern on it.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Texture">
            <summary>
            An icon of a framed picture intended to represent an image texture.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Variant">
            <summary>
            An icon of a cardboard box intended to represent a variation of a model.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Light">
            <summary>
            A picture of a lightbulb. Intended to represent a source of light.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Value">
            <summary>
            A picture of a hand pointing to a text box containing an arbitrary value.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Triangle">
            <summary>
            A blue triangle, intended to represent more rudimentary components of models (e.g. sub-models in a static model).
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Tile">
            <summary>
            A green square of grass that represents a tile in a TudeySceneModel
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Matrix">
            <summary>
            A 3x3 grid of blocks within square brackets [ ] that represents a transformation matrix, intended for Transform3D
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Vector3">
            <summary>
            A row of three colored blocks, red, green, and blue for X, Y, and Z respectively. Intended to represent a Vector3f
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Vector4">
            <summary>
            A row of three colored blocks, red, green, blue, and magenta for X, Y, Z, and W respectively. Intended to represent a Vector4f or Quaternion
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Missing">
            <summary>
            A transparent red building brick intended to represent a missing asset.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Tag">
            <summary>
            A tag, like a cardboard price tag that hangs off of an object.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Wrench">
            <summary>
            An orange wrench.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.MissingConfig">
            <summary>
            Identical to <see cref="F:XDataTree.Data.SilkImage.Config"/> but with a warning icon on it.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.Editable">
            <summary>
            Identical to <see cref="F:XDataTree.Data.SilkImage.Value"/> but it has a pencil on it.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.RedTag">
            <summary>
            Identical to <see cref="F:XDataTree.Data.SilkImage.Tag"/> but the inner part is red instead of blue.
            </summary>
        </member>
        <member name="F:XDataTree.Data.SilkImage.None">
            <summary>
            A transparent space. Note that it is not advised to use this when no icon is applicable. Consider using <see cref="F:XDataTree.Data.SilkImage.Generic"/> instead.
            </summary>
        </member>
        <member name="T:XDataTree.TreeElement">
            <summary>
            Represents an element in a data tree in its most minimal form.
            </summary>
        </member>
        <member name="F:XDataTree.TreeElement.Children">
            <summary>
            All child nodes of this <see cref="T:XDataTree.TreeElement"/>.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElement.Properties">
            <summary>
            If this <see cref="T:XDataTree.TreeElement"/> has associated properties (mostly used for a second data tree view),
            then this is the element of the actual properties window.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElement.Icon">
            <summary>
            The icon displayed on this tree element.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElement.Text">
            <summary>
            The text displayed on this element.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElement.Tooltip">
            <summary>
            The tooltip to display on this when the mouse hovers over it.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElement.CanContainChildren">
            <summary>
            Whether or not this element in the data tree can have objects inside of it.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElement.IsEditable">
            <summary>
            Whether or not this tree element can be edited in some fashion. This causes its text to display in blue with an underline.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElement.EquivalentNode">
            <summary>
            Only available after calling <see cref="M:XDataTree.TreeElement.ConvertToNode"/>, this is the equivalent <see cref="T:System.Windows.Forms.TreeNode"/> for use in a WinForms based application.
            </summary>
        </member>
        <member name="M:XDataTree.TreeElement.#ctor(XDataTree.Data.SilkImage)">
            <summary>
            Construct a new <see cref="T:XDataTree.TreeElement"/> using the given icon.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:XDataTree.TreeElement.#ctor">
            <summary>
            Explicitly for <see cref="T:XDataTree.TreeElements.RootSubstituteElement"/>
            </summary>
        </member>
        <member name="M:XDataTree.TreeElement.GetChildren">
            <summary>
            Returns a list of every tree element within this one. Returns an empty array if <see cref="P:XDataTree.TreeElement.CanContainChildren"/> is <see langword="false"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:XDataTree.TreeElement.ClearAllChildren">
            <summary>
            Clears all child elements from this instance, if supported.
            </summary>
        </member>
        <member name="M:XDataTree.TreeElement.Add(XDataTree.TreeElement)">
            <summary>
            Adds the given <see cref="T:XDataTree.TreeElement"/> as a child of this.
            </summary>
            <param name="child"></param>
            <exception cref="T:System.NotSupportedException">If <see cref="P:XDataTree.TreeElement.CanContainChildren"/> is <see langword="false"/></exception>
        </member>
        <member name="M:XDataTree.TreeElement.Remove(XDataTree.TreeElement)">
            <summary>
            Removes the given <see cref="T:XDataTree.TreeElement"/> from this element's child list.
            </summary>
            <param name="child"></param>
            <exception cref="T:System.NotSupportedException">If <see cref="P:XDataTree.TreeElement.CanContainChildren"/> is <see langword="false"/></exception>
        </member>
        <member name="M:XDataTree.TreeElement.Contains(XDataTree.TreeElement)">
            <summary>
            Checks whether or not the given <see cref="T:XDataTree.TreeElement"/> is a child of this.
            </summary>
            <param name="child"></param>
            <exception cref="T:System.NotSupportedException">If <see cref="P:XDataTree.TreeElement.CanContainChildren"/> is <see langword="false"/></exception>
        </member>
        <member name="M:XDataTree.TreeElement.OnSelected(System.Threading.SynchronizationContext,System.Object)">
            <summary>
            Executes when this tree element is clicked on or highlighted.
            </summary>
        </member>
        <member name="M:XDataTree.TreeElement.OnDeselected(System.Threading.SynchronizationContext,System.Object)">
            <summary>
            Executes when this tree element is deselected, either by something else being clicked on or it being unhighlighted.
            </summary>
        </member>
        <member name="M:XDataTree.TreeElement.OnActivated(System.Threading.SynchronizationContext,System.Object)">
            <summary>
            Executes when this element is double clicked on or the enter key is pressed while it's selected.
            </summary>
        </member>
        <member name="M:XDataTree.TreeElement.ConvertToNode">
            <summary>
            Converts this <see cref="T:XDataTree.TreeElement"/> into a <see cref="T:System.Windows.Forms.TreeNode"/>. If this has any child elements, they are converted as well.
            </summary>
            <remarks>
            This sets the <see cref="P:System.Windows.Forms.TreeNode.Tag"/> property to its equivalent <see cref="T:XDataTree.TreeElement"/>. Likewise, this populates
            </remarks>
            <returns></returns>
        </member>
        <member name="T:XDataTree.TreeElements.GenericElement">
            <summary>
            A generic <see cref="T:XDataTree.TreeElement"/> containing text and an icon. Can contain child nodes. 
            It is best compared to a folder, with no special functionality on its own.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.GenericElement.Text">
            <inheritdoc/>
        </member>
        <member name="P:XDataTree.TreeElements.GenericElement.CanContainChildren">
            <inheritdoc/>
        </member>
        <member name="M:XDataTree.TreeElements.GenericElement.#ctor(System.String,XDataTree.Data.SilkImage)">
            <summary>
            A generic <see cref="T:XDataTree.TreeElement"/> containing text and an icon. Can contain child nodes.
            </summary>
            <param name="text">The text displayed on this node.</param>
            <param name="icon">The icon used for this node.</param>
        </member>
        <member name="M:XDataTree.TreeElements.GenericElement.SetText(System.String)">
            <summary>
            Sets the text to the given <see cref="T:System.String"/>.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:XDataTree.TreeElements.GenericElement.SetIcon(XDataTree.Data.SilkImage)">
            <summary>
            Sets the icon to the given <see cref="T:XDataTree.Data.SilkImage"/>.
            </summary>
            <param name="icon"></param>
        </member>
        <member name="M:XDataTree.TreeElements.GenericElement.SetCanContainChildren(System.Boolean)">
            <summary>
            Changes whether or not child elements are allowed.
            </summary>
            <param name="allowChildren"></param>
        </member>
        <member name="T:XDataTree.TreeElements.Interop.EventHandlingTreeNode">
            <summary>
            An extension to <see cref="T:System.Windows.Forms.TreeNode"/> that provides methods that execute when this is selected, deselected, or double-clicked / return is pressed.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.Interop.EventHandlingTreeNode.OnSelected">
            <summary>
            An action that will occur when this node is selected.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.Interop.EventHandlingTreeNode.OnDeselected">
            <summary>
            An action that will occur when this node is deselected.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.Interop.EventHandlingTreeNode.OnActivated">
            <summary>
            An action that will occur when this node is double clicked, or when the return key is pressed on it.
            </summary>
        </member>
        <member name="T:XDataTree.TreeElements.KeyValueContainerElement">
            <summary>
            A container for one or more <see cref="T:XDataTree.TreeElements.KeyValueElement"/>s. This is primarily useful for cases where bulk-setting a lot of key/value pairs is necessary
            due to its inclusion of dedicated methods to handle these cases.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.KeyValueContainerElement.Text">
            <inheritdoc/>
        </member>
        <member name="P:XDataTree.TreeElements.KeyValueContainerElement.CanContainChildren">
            <inheritdoc/>
        </member>
        <member name="M:XDataTree.TreeElements.KeyValueContainerElement.#ctor(System.String,XDataTree.Data.SilkImage)">
            <summary>
            Create a new <see cref="T:XDataTree.TreeElements.KeyValueContainerElement"/>, which is intended to contain one or more <see cref="T:XDataTree.TreeElements.KeyValueElement"/>s.
            </summary>
            <param name="text">The text to display on this container.</param>
            <param name="icon">The icon to use for this container.</param>
        </member>
        <member name="M:XDataTree.TreeElements.KeyValueContainerElement.Add(System.String,System.Object,XDataTree.Data.SilkImage)">
            <summary>
            Adds the given key/value pair to this container. Converts the pair into a <see cref="T:XDataTree.TreeElements.KeyValueElement"/>.
            </summary>
            <param name="key">The key for this value.</param>
            <param name="value">The value to display. The <see cref="M:System.Object.ToString"/> method will be used on this.</param>
            <param name="icon">The icon to use for this value. It is recommended that this is uniform for all entries, but it is not required.</param>
        </member>
        <member name="M:XDataTree.TreeElements.KeyValueContainerElement.Add(XDataTree.TreeElements.KeyValueElement)">
            <summary>
            Directly adds the given <see cref="T:XDataTree.TreeElements.KeyValueElement"/> to this container.
            </summary>
            <param name="kvElement">The element to add to this container.</param>
        </member>
        <member name="M:XDataTree.TreeElements.KeyValueContainerElement.Remove(System.String)">
            <summary>
            Removes the first element that has the given key.
            </summary>
            <param name="key">The key to search for.</param>
        </member>
        <member name="M:XDataTree.TreeElements.KeyValueContainerElement.Remove(XDataTree.TreeElements.KeyValueElement)">
            <summary>
            Directly removes the given <see cref="T:XDataTree.TreeElements.KeyValueElement"/> from this container.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:XDataTree.TreeElements.KeyValueContainerElement.SetToEnumerable(System.Collections.IEnumerable,XDataTree.Data.SilkImage[],System.Boolean)">
            <summary>
            Sets the contents of this container to an <see cref="T:System.Collections.IEnumerable"/>. The child <see cref="T:XDataTree.TreeElements.KeyValueElement"/> will use <c>[n]</c> as their keys, and ToString() of each array element as values.
            If this is an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> (or, a <see cref="T:System.Collections.Generic.Dictionary`2"/>) then this will treat it accordingly.
            </summary>
            <param name="enumerable">The object array to use in this container.</param>
            <param name="imageOverrides">If defined, this is a 1:1 override of the images used on a given value object. That is, <paramref name="imageOverrides"/>[0] is the image used on <paramref name="enumerable"/>[0], <paramref name="imageOverrides"/>[1] for <paramref name="enumerable"/>[1], and so on for each index. If the length of this is 1, then that icon is used for all elements.</param>
            <param name="keyless">If true, keys will be blank strings instead of the array index.</param>
        </member>
        <member name="M:XDataTree.TreeElements.KeyValueContainerElement.SetToDictionary(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Collections.Generic.Dictionary{System.Object,XDataTree.Data.SilkImage},System.Boolean)">
            <summary>
            Sets the contents of this container to a dictionary. The child <see cref="T:XDataTree.TreeElements.KeyValueElement"/> will use the result of <see cref="M:System.Object.ToString"/> for both the key and value.
            </summary>
            <param name="dictionary">The dictionary to use in this container.</param>
            <param name="imageOverrides">If defined, this is a 1:1 override of the images used on a given value object. That is, <paramref name="imageOverrides"/>[key0] is the image used on <paramref name="dictionary"/>[key0], <paramref name="imageOverrides"/>[key1] for <paramref name="dictionary"/>[key1], and so on for each index.</param>
            <param name="strictImageOverrides">If true, and if a key exists in <paramref name="dictionary"/> but not <paramref name="imageOverrides"/>, then an exception will be raised instead of defaulting to <see cref="F:XDataTree.Data.SilkImage.Value"/></param>
        </member>
        <member name="T:XDataTree.TreeElements.KeyValueElement">
            <summary>
            A "key-value" element contains dedicated <see cref="P:XDataTree.TreeElements.KeyValueElement.Key"/> and <see cref="P:XDataTree.TreeElements.KeyValueElement.Value"/> properties that both enforce certain text-based parameters. 
            It cannot contain child nodes, but in turn, can optionally display its value as a child element. To create a list of many key/value pairs together,
            consider using <see cref="T:XDataTree.TreeElements.KeyValueContainerElement"/>.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.KeyValueElement.ValueHolder">
            <summary>
            The object containing the possible values for this <see cref="T:XDataTree.TreeElements.KeyValueElement"/>, assuming it's editable.<para/>
            In most cases, this is something like a StaticSetConfig's ShadowClass.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.KeyValueElement.Key">
            <summary>
            The key for this element. Displays as a prefix in <see cref="P:XDataTree.TreeElements.KeyValueElement.Text"/>: <c>"Key: "</c>
            </summary>
            <remarks>
            If <see cref="P:XDataTree.TreeElements.KeyValueElement.Value"/> is <see langword="null"/> or whitespace, then <see cref="P:XDataTree.TreeElements.KeyValueElement.Text"/> will point directly to this and nothing else (it will not have the trailing colon either).
            </remarks>
        </member>
        <member name="P:XDataTree.TreeElements.KeyValueElement.Value">
            <summary>
            The value for this element. Displays as a suffix in <see cref="P:XDataTree.TreeElements.KeyValueElement.Text"/>: <c>"Value"</c>.
            </summary>
            <remarks>
            If <see cref="P:XDataTree.TreeElements.KeyValueElement.Key"/> is <see langword="null"/> or whitespace, then <see cref="P:XDataTree.TreeElements.KeyValueElement.Text"/> will point directly to this and nothing else.
            </remarks>
        </member>
        <member name="P:XDataTree.TreeElements.KeyValueElement.Text">
            <inheritdoc/>
            <remarks>
            For <see cref="T:XDataTree.TreeElements.KeyValueElement"/>s, <see cref="P:XDataTree.TreeElements.KeyValueElement.Text"/>.<see langword="set"/> will throw a <see cref="T:System.NotImplementedException"/>.
            </remarks>
        </member>
        <member name="P:XDataTree.TreeElements.KeyValueElement.CanContainChildren">
            <inheritdoc/>
        </member>
        <member name="M:XDataTree.TreeElements.KeyValueElement.#ctor(System.String,System.String,System.Boolean,XDataTree.Data.SilkImage)">
            <summary>
            Construct a new <see cref="T:XDataTree.TreeElements.KeyValueElement"/> with the given key and value, optionally defining it as editable.
            </summary>
            <param name="key">The key to display.</param>
            <param name="value">The value to display.</param>
            <param name="editable">Whether or not this is intended to be edited, which makes the text show in blue with an underline.</param>
            <param name="icon">The icon to use on this node.</param>
        </member>
        <member name="T:XDataTree.TreeElements.RootSubstituteElement">
            <summary>
            A <see cref="T:XDataTree.TreeElement"/> that serves as a temporary "root node". It only supports child objects. Attempting to index any other properties or convert it to a node
            will raise <see cref="T:System.NotSupportedException"/>
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.RootSubstituteElement.Text">
            <summary>
            Cannot be used in <see cref="T:XDataTree.TreeElements.RootSubstituteElement"/> instances.
            Both <see langword="get"/> and <see langword="set"/> raise <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.RootSubstituteElement.Tooltip">
            <inheritdoc cref="P:XDataTree.TreeElements.RootSubstituteElement.Text"/>
        </member>
        <member name="P:XDataTree.TreeElements.RootSubstituteElement.CanContainChildren">
            <summary>
            In <see cref="T:XDataTree.TreeElements.RootSubstituteElement"/>, this is always <see langword="true"/>.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.RootSubstituteElement.IsEditable">
            <summary>
            In <see cref="T:XDataTree.TreeElements.RootSubstituteElement"/>, this is always <see langword="false"/>.
            </summary>
        </member>
        <member name="M:XDataTree.TreeElements.RootSubstituteElement.AddToTreeView(System.Windows.Forms.TreeView)">
            <summary>
            Adds all children of this to the given <see cref="T:System.Windows.Forms.TreeView"/>.
            </summary>
        </member>
        <member name="P:XDataTree.TreeElements.RootSubstituteElement.Empty">
            <summary>
            Whether or not this element is empty.
            </summary>
        </member>
    </members>
</doc>
