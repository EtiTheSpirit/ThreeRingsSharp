<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThreeRingsSharp</name>
    </assembly>
    <members>
        <member name="T:ThreeRingsSharp.DataHandlers.AnimationConfigBrancher">
            <summary>
            A class that takes in an <see cref="T:com.threerings.opengl.model.config.AnimationConfig"/> and handles the data appropriately.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.ClydeFileHandler">
            <summary>
            A class designed to handle files exported by the Clyde library.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.DataHandlers.ClydeFileHandler.ClydeObjectCache">
            <summary>
            An object cache of files that have already been read. Should drastically speed up models with a lot of references.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.ClydeFileHandler.UpdateGUIAction">
            <summary>
            A delegate action that is called when the GUI needs to update. This can safely be <see langword="null"/> for contexts that do not have a GUI, as it is used for the SK Animator Tools UI.<para/>
            Pass in <see langword="null"/> for arguments to make their data remain unchanged.<para/>
            This is designed to work with the UI offered by SK Animator Tools V2. The parameters are as follows:<para/>
            <c>string fileName (the name of the file that was opened)<para/>
            string isCompressed (a string of true/false, yes/no, etc.)<para/>
            string formatVersion (represents clyde file version. Classic, Intermediate, or VarInt for example)<para/>
            string type (the base class, e.g. ModelConfig, AnimationConfig, ScriptedConfig)</c>
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.ClydeFileHandler.GetAppropriateImporter(System.IO.FileInfo)">
            <summary>
            Given a <see cref="T:System.IO.FileInfo"/> of a clyde file, this will return the appropriate importer (binary or XML)<para/>
            Remember to close the importer after you're done using it c:
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.ClydeFileHandler.HandleClydeFile(System.IO.FileInfo,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},System.Boolean,System.Object,System.Boolean,com.threerings.math.Transform3D,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Takes in a <see cref="T:System.IO.FileInfo"/> representing a file that was created with the Clyde library.<para/>
            This will throw a <see cref="T:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException"/> if anything goes wrong during reading.
            </summary>
            <param name="clydeFile">The file to load and decode.</param>
            <param name="allGrabbedModels">A list containing every processed model from the entire hierarchy. This list should be defined by you and then passed in.</param>
            <param name="isBaseFile">If <see langword="true"/>, this will update the main GUI display data for the base loaded model. If the GUI is not defined (e.g. this is being used in a library) this will do nothing.</param>
            <param name="lastNodeParent">Intended for use if <paramref name="isBaseFile"/> is <see langword="false"/>, this is the parent Data Tree element to add this model into (so that the hierarchy can be constructed). This should be a <see cref="T:System.Windows.Forms.TreeNode"/>, a <see cref="T:System.Windows.Forms.TreeView"/>, or a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>.</param>
            <param name="useFileName">If <see langword="true"/>, the name of the loaded file will be displayed in the tree hierarchy's root node, e.g. model.dat</param>
            <param name="transform">Intended to be used by reference loaders, this specifies an offset for referenced models. All models loaded by this method in the given chain / hierarchy will have this transform applied to them. If it doesn't exist, it will be created.</param>
            <param name="extraData">Any extra data that should be included. This is mainly used by references (e.g. a reference is a <see cref="T:com.threerings.opengl.model.config.StaticSetConfig"/>, the target model in the set may be included as extra data)</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.ClydeFileHandler.HandleConfigReferenceLookup(System.IO.FileInfo)">
            <summary>
            Directly handles a <see cref="T:System.IO.FileInfo"/> that is expected to be a config reference (that is, stored in <c>rsrc/config/</c>).<para/>
            This method is unchecked. It does not look to see if the file is an actual proper file. Please be careful.
            </summary>
            <param name="clydeFile"></param>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility">
            <summary>
            Specialized methods to pull specific data out of models via their directs.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility.TraverseDirectPath(System.Object,System.String)">
            <summary>
            Navigates through <paramref name="cfg"/> with the given <paramref name="path"/> as a direct.<para/>
            This returns the end value at the path, as well as the value one element up from the bottom of the path (since this can often be used for context)
            </summary>
            <param name="cfg"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility.ReflectionHelper">
            <summary>
            Provides aliases to get fields or indices of objects via reflection.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility.ReflectionHelper.Get(System.Object,System.String)">
            <summary>
            Returns the value of the given instance field.
            </summary>
            <param name="obj"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility.ReflectionHelper.Set(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the given instance field.
            </summary>
            <param name="obj"></param>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility.ReflectionHelper.Index(System.Object,System.Int32)">
            <summary>
            Assuming <paramref name="obj"/> is an array, this returns <paramref name="obj"/>[<paramref name="idx"/>]
            </summary>
            <param name="obj"></param>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility.ReflectionHelper.GetPaths(System.Object)">
            <summary>
            An alias that returns the <c>paths</c> field as a <see langword="string"/>[], of course, intended to be called on a <see cref="T:com.threerings.config.Parameter.Direct"/>
            </summary>
            <param name="direct"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility.ReflectionHelper.GetOOOConfigAndParameter(System.Object,System.String,System.String)">
            <summary>
            In the context of config maps, a <see cref="T:com.threerings.config.ConfigReference"/> returns a path relative to an OOO config file.<para/>
            This method will attempt to resolve that path when given a <see cref="T:com.threerings.config.ConfigReference"/> and a configuration index (which is the name of one of the xml files in the spiral knights/config directory, e.g. "material" or "tile")<para/>
            Assuming <paramref name="fromObj"/> is a <see cref="T:com.threerings.config.ConfigReference"/>, this will call its <c>getName()</c> method (which returns its path), resolve the config data via <see cref="T:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper"/>, and return the object with the given name.<para/>
            Given <paramref name="directName"/>, it will attempt to call the <c>getParameter()</c> method on the returned config with an argument of this name, which should return the <see cref="T:com.threerings.config.Parameter"/> it's pointing to.<para/>
            The first return value is the <see cref="T:com.threerings.config.ConfigReference"/> after resolution (which will be a specific reference type, like <see cref="T:com.threerings.opengl.material.config.MaterialConfig"/>), and the second value is the <see cref="T:com.threerings.config.Parameter"/> returned by ^.
            </summary>
            <param name="fromObj"></param>
            <param name="directName"></param>
            <param name="threeRingsConfigName"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility.ReflectionHelper.GetOOOConfigAndParameter(System.Object,System.String,System.Type)">
            <summary>
            In the context of config maps, a <see cref="T:com.threerings.config.ConfigReference"/> returns a path relative to an OOO config file.<para/>
            This method will attempt to resolve that path when given a <see cref="T:com.threerings.config.ConfigReference"/> and a configuration index (which is the name of one of the xml files in the spiral knights/config directory, e.g. "material" or "tile")<para/>
            Assuming <paramref name="fromObj"/> is a <see cref="T:com.threerings.config.ConfigReference"/>, this will call its <c>getName()</c> method (which returns its path), resolve the config data via <see cref="T:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper"/>, and return the object with the given name.<para/>
            Given <paramref name="directName"/>, it will attempt to call the <c>getParameter()</c> method on the returned config with an argument of this name, which should return the <see cref="T:com.threerings.config.Parameter"/> it's pointing to.<para/>
            The first return value is the <see cref="T:com.threerings.config.ConfigReference"/> after resolution (which will be a specific reference type, like <see cref="T:com.threerings.opengl.material.config.MaterialConfig"/>), and the second value is the <see cref="T:com.threerings.config.Parameter"/> returned by ^.
            </summary>
            <param name="fromObj"></param>
            <param name="directName"></param>
            <param name="threeRingsConfigType"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Properties.ModelPropertyUtility.ReflectionHelper.GetOOOConfigAndParameter(System.Object,System.String)">
            <summary>
            Gets a <see cref="T:com.threerings.config.ConfigReference"/> of the given name. Unlike the alternatives to this method, this one will iterate through all config refs (and by extension, does not require a direct config group name).
            </summary>
            <param name="fromObj"></param>
            <param name="directName"></param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.ModelConfigBrancher">
            <summary>
            A class that takes in a <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>, determines its subtype (e.g. <see cref="T:com.threerings.opengl.model.config.ArticulatedConfig"/>, <see cref="T:com.threerings.opengl.model.config.StaticConfig"/>, etc.), and handles the data appropriately.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.ModelConfigBrancher.HandleDataFrom(System.IO.FileInfo,com.threerings.opengl.model.config.ModelConfig,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Boolean,com.threerings.math.Transform3D,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sends an arbitrary <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> into the data brancher and processes it.
            </summary>
            <param name="sourceFile">The file that the given <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> came from.</param>
            <param name="model">The <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> itself.</param>
            <param name="models">A list containing every processed model from the entire hierarchy.</param>
            <param name="currentDataTreeObject">The current element in the data tree hierarchy to use.</param>
            <param name="useImplementation">If <see langword="false"/>, the name of the implementation will be displayed instead of the file name. Additionally, it will not have its implementation property.</param>
            <param name="transform">Intended to be used by reference loaders, this specifies an offset for referenced models. All models loaded by this method in the given chain / hierarchy will have this transform applied to them. If the value passed in is <see langword="null"/>, it will be substituted with a new <see cref="T:com.threerings.math.Transform3D"/>.</param>
            <param name="extraData">Any extra data that should be included. This is mainly used by references (e.g. a reference is a <see cref="T:com.threerings.opengl.model.config.StaticSetConfig"/>, the target model in the set may be included as extra data)</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.ArticulatedConfigHandler.RecursivelyIterateNodes(com.threerings.opengl.model.config.ModelConfig,com.threerings.opengl.model.config.ArticulatedConfig,System.IO.FileInfo,com.threerings.opengl.model.config.ArticulatedConfig.Node,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},com.threerings.math.Transform3D,System.String)">
            <summary>
            A utility function that iterates through all of the nodes recursively, as some may store mesh data.
            </summary>
            <param name="baseModel">The <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> that contained this <see cref="T:com.threerings.opengl.model.config.ArticulatedConfig"/>.</param>
            <param name="model">A reference to the <see cref="T:com.threerings.opengl.model.config.ArticulatedConfig"/> that contains these nodes.</param>
            <param name="sourceFile">The file where the <see cref="T:com.threerings.opengl.model.config.ArticulatedConfig"/> is stored.</param>
            <param name="parent">The parent node to iterate through.</param>
            <param name="models">The <see cref="T:System.Collections.Generic.List`1"/> of all models ripped from the source .dat file in this current chain (which may include references to other .dat files)</param>
            <param name="latestTransform">The latest transform that has been applied. This is used for recursive motion since nodes inherit the transform of their parent.</param>
            <param name="fullDepthName">The complete path to this model from rsrc, rsrc included.</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.ConfigReferenceUtil.HandleConfigReference(System.IO.FileInfo,com.threerings.config.ConfigReference,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},ThreeRingsSharp.Utility.Interface.DataTreeObject,com.threerings.math.Transform3D,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Takes in a <see cref="T:com.threerings.config.ConfigReference"/> and loads its data. It then returns the loaded model and all of its descendants as a list of <see cref="T:ThreeRingsSharp.XansData.Model3D"/> instances.
            </summary>
            <param name="sourceFile">The original base-level file that contains the reference.</param>
            <param name="reference">The reference itself.</param>
            <param name="modelCollection">A list of every model that has been loaded recursively.</param>
            <param name="dataTreeParent">For cases where the GUI is used, this is the data tree representation.</param>
            <param name="globalTransform">The transformation to apply to all loaded models.</param>
            <param name="appendModelsToModelCollection">If true, the loaded models will be appended to <paramref name="modelCollection"/>.</param>
            <param name="extraData">Any extra data that should be included. This is mainly used by references (e.g. a reference is a <see cref="T:com.threerings.opengl.model.config.StaticSetConfig"/>, the target model in the set may be included as extra data)</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.ConfigReferenceUtil.HandleConfigReferenceFromDirectPath(System.IO.FileInfo,System.String,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},ThreeRingsSharp.Utility.Interface.DataTreeObject,com.threerings.math.Transform3D,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Takes in a <see cref="T:System.String"/> filepath and loads its data. It then returns the loaded model and all of its descendants as a list of <see cref="T:ThreeRingsSharp.XansData.Model3D"/> instances.
            </summary>
            <param name="sourceFile">The original base-level file that contains the reference.</param>
            <param name="filePathRelativeToRsrc">The path of the referenced file, relative to the rsrc directory.</param>
            <param name="modelCollection">A list of every model that has been loaded recursively.</param>
            <param name="dataTreeParent">For cases where the GUI is used, this is the data tree representation.</param>
            <param name="globalTransform">The transformation to apply to all loaded models.</param>
            <param name="appendModelsToModelCollection">If true, the loaded models will be appended to <paramref name="modelCollection"/>.</param>
            <param name="extraData">Any extra data that should be included. This is mainly used by references (e.g. a reference is a <see cref="T:com.threerings.opengl.model.config.StaticSetConfig"/>, the target model in the set may be included as extra data)</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.ConfigReferenceUtil.HandleComponentModel(System.IO.FileInfo,com.threerings.opengl.model.config.CompoundConfig.ComponentModel,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},ThreeRingsSharp.Utility.Interface.DataTreeObject,com.threerings.math.Transform3D,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Takes in a <see cref="T:com.threerings.opengl.model.config.CompoundConfig.ComponentModel"/> and loads its data. It then returns the loaded model and all of its descendants as a list of <see cref="T:ThreeRingsSharp.XansData.Model3D"/> instances.<para/>
            WARNING: This will return <see langword="null"/> if the configreference does not reference anything!
            </summary>
            <param name="sourceFile">The original base-level file that contains the reference.</param>
            <param name="model">The reference itself, stored within a <see cref="T:com.threerings.opengl.model.config.CompoundConfig.ComponentModel"/>.</param>
            <param name="modelCollection">A list of every model that has been loaded recursively.</param>
            <param name="dataTreeParent">For cases where the GUI is used, this is the data tree representation.</param>
            <param name="globalTransform">The transformation to apply to all loaded models.</param>
            <param name="appendModelsToModelCollection">If true, the loaded models will be appended to <paramref name="modelCollection"/>.</param>
            <param name="extraData">Any extra data that should be included. This is mainly used by references (e.g. a reference is a <see cref="T:com.threerings.opengl.model.config.StaticSetConfig"/>, the target model in the set may be included as extra data)</param>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator">
            <summary>
            A specialized class designed to handle <see cref="T:com.threerings.opengl.geometry.config.GeometryConfig"/> types and pull the necessary information out, placing it into a <see cref="T:ThreeRingsSharp.XansData.Model3D"/>
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.GetGeometryInformation(com.threerings.opengl.geometry.config.GeometryConfig,System.String)">
            <summary>
            Translates the given <see cref="T:com.threerings.opengl.geometry.config.GeometryConfig"/> into a <see cref="T:ThreeRingsSharp.XansData.Model3D"/>.
            </summary>
            <param name="geometry">The <see cref="T:com.threerings.opengl.geometry.config.GeometryConfig"/> storing the applicable data.</param>
            <param name="geometryIndex">A unique identifier generated by the caller of this method used to identify this geometry. If this ID is seen multiple times, the geometry won't be processed and instead the returned model will reference the existing data.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.GetFromShortBuffer(java.nio.ShortBuffer)">
            <summary>
            Since the given buffer may not have an array, this will automatically perform necessary edits to get a <see cref="T:System.Int16"/> array.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.GetArrayByName(com.threerings.opengl.geometry.config.GeometryConfig.AttributeArrayConfig[],System.String)">
            <summary>
            Attempts to locate a <see cref="T:com.threerings.opengl.geometry.config.GeometryConfig.AttributeArrayConfig"/> that has the given name from <paramref name="vertexAttributeArrays"/>.
            </summary>
            <param name="vertexAttributeArrays">The list of arrays to search.</param>
            <param name="name">The name to locate.</param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.BoneDataContainer">
            <summary>
            A container class for bone indices and weights.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.BoneDataContainer.BoneIndices">
            <summary>
            Bone indices are an array of four <see cref="T:System.Single"/> values. It traverses the chain of bones. An index of 0 means stop traversing (this is because bone 0 is always %ROOT%).
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.BoneDataContainer.BoneWeights">
            <summary>
            Bone weights are an array of four <see cref="T:System.Single"/> values. These values correspond to a bone index.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.ModelConfigHandler.SetupCosmeticInformation(com.threerings.opengl.model.config.ModelConfig,ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Boolean)">
            <summary>
            Sets up the cosmetic data for this model, or, what's displayed in the GUI for the program.<para/>
            This specific method populates data that is common across all imported models.
            </summary>
            <param name="model">The model containing other data, such as the <see cref="T:com.threerings.opengl.model.config.ModelConfig.Implementation"/>.</param>
            <param name="dataTreeParent">This is the instance in the data tree that represents this object in the hierarchy. If null, this method call is skipped.</param>
            <param name="dataTreeNameIsImplementation">If <see langword="true"/>, the name of <paramref name="dataTreeParent"/> is the implementation of the model, so the implementation property will not be added.</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.ModelConfigHandler.GetTexturesFromModel(System.IO.FileInfo,com.threerings.opengl.model.config.ModelConfig.Implementation)">
            <summary>
            Given an <see cref="T:com.threerings.opengl.model.config.ModelConfig.Implementation"/>, this will extract all textures referenced by it. This will return <see langword="null"/> if the <see cref="T:com.threerings.opengl.model.config.ModelConfig.Implementation"/> is not <see cref="T:com.threerings.opengl.model.config.ModelConfig.Imported"/>.
            </summary>
            <param name="sourceFile">The file containing the <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> that has defined <paramref name="implementation"/>.</param>
            <param name="implementation">The specific type of model that this is.</param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.ModelConfigHandler.DerivedHandler">
            <summary>
            A class that handles the <see cref="T:com.threerings.opengl.model.config.ModelConfig.Derived"/> subclass of <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.ModelConfigHandler.SchemedHandler">
            <summary>
            A class that handles the <see cref="T:com.threerings.opengl.model.config.ModelConfig.Schemed"/> subclass of <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.IModelDataHandler">
            <summary>
            Represents a class designed to handle the data within a <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.IModelDataHandler.HandleModelConfig(System.IO.FileInfo,com.threerings.opengl.model.config.ModelConfig,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},ThreeRingsSharp.Utility.Interface.DataTreeObject,com.threerings.math.Transform3D,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Handles the data from the given <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
            <param name="sourceFile">The file that contains this data.</param>
            <param name="baseModel">The <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> storing the data.</param>
            <param name="modelCollection">A reference to a list of models that will be written to.</param>
            <param name="dataTreeParent">An optional parameter for use in GUI Data Trees that will be populated with information about this model. This node will be one in the object hierarchy. Add properties to this to display these properties when it is selected, or add direct children to this.</param>
            <param name="globalTransform">Intended to be used by reference loaders, this specifies an offset for referenced models. All models loaded by this method in the given chain / hierarchy should have this transform applied to them.</param>
            <param name="extraData">Any extra data that should be included. This is mainly used by references (e.g. a reference is a <see cref="T:com.threerings.opengl.model.config.StaticSetConfig"/>, the target model in the set may be included as extra data)</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.StaticConfigHandler.SetupCosmeticInformation(com.threerings.opengl.model.config.StaticConfig,ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Sets up the cosmetic data for this model, or, what's displayed in the GUI for the program.
            </summary>
            <param name="model">The <see cref="T:com.threerings.opengl.model.config.StaticConfig"/> to pull data from.</param>
            <param name="dataTreeParent">This is the instance in the data tree that represents this object in the hierarchy.</param>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Model.StaticSetConfigHandler.Instance">
            <summary>
            A reference to the singleton instance of this handler.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.ViewerAffecterConfigHandler">
            <summary>
            Handles instance of <see cref="T:com.threerings.opengl.scene.config.ViewerAffecterConfig"/> and their associated <see cref="T:com.threerings.opengl.scene.config.ViewerEffectConfig"/>s.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.IDataTreeInterface`1">
            <summary>
            Represents a class that can interface with a data tree GUI element to display information about a <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.IDataTreeInterface`1.SetupCosmeticInformation(`0,ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Sets up the cosmetic data for instance, or, what's displayed in the GUI for the program.
            </summary>
            <param name="data">The object to pull data from.</param>
            <param name="dataTreeParent">This is the instance in the data tree that represents this object in the hierarchy.</param>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig">
            <summary>
            Represents a <see cref="T:com.threerings.tudey.config.TileConfig"/> in a non-descriptive manner (that is, as a bare-bones object with the information needed to load the data inside).
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.TileLookup">
            <summary>
            A lookup from <see cref="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Name"/> to <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> instance.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Name">
            <summary>
            The display name of this item, which is what's used in the lookup of <see cref="T:com.threerings.tudey.config.TileConfig"/>s.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.TargetModel">
            <summary>
            If the reference points to a <see cref="T:com.threerings.opengl.model.config.StaticSetConfig"/>, then this dictates which model from the set is being used.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Width">
            <summary>
            The width of this tile. If this is a derived reference, this will point to the width of the lowest level original tile.<para/>
            When attempting to place the tile in the 3D world, consider using <c>TileEntryExtensions</c> and calling <see cref="M:ThreeRingsSharp.XansData.Extensions.TileEntryExtensions.GetWidth(com.threerings.tudey.data.TudeySceneModel.TileEntry,ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig)"/>, which accounts for rotation.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Height">
            <summary>
            The height of this tile. If this is a derived reference, this will point to the width of the lowest level original tile.<para/>
            When attempting to place the tile in the 3D world, consider using <c>TileEntryExtensions</c> and calling <see cref="M:ThreeRingsSharp.XansData.Extensions.TileEntryExtensions.GetHeight(com.threerings.tudey.data.TudeySceneModel.TileEntry,ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig)"/>, which accounts for rotation.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Reference">
            <summary>
            If <see cref="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Derived"/> is <see langword="true"/>, this is the <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> that this points to to get its model reference.<para/>
            If <see cref="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Derived"/> is <see langword="false"/>, this is <see langword="null"/>.<para/>
            Note: It is safe to reference <see cref="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.ModelPath"/> even if this exists, as it will chain down on its own (so if there's a chain of Derived implementations, it will go down all of them for you). You should reference <see cref="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.ModelPath"/> if that's the data you want.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.ModelPath">
            <summary>
            This is equivalent to the return value of <see cref="M:com.threerings.config.ConfigReference.getName"/>, which generally returns a filepath relative to the spiral knights rsrc directory (in the case of this property, this is exactly what it does).<para/>
            This is always populated even if <see cref="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Derived"/> is true (derived implementations don't contain their own model path), because this climbs down any derived chains until it finds an instance of <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> where this is set.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Derived">
            <summary>
            If <see langword="true"/>, this was declared via a Derived type, and <see cref="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.Reference"/> is populated.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.#ctor(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/>.
            </summary>
            <param name="name">The name used in the lookup from a <see cref="T:com.threerings.tudey.data.TudeySceneModel.TileEntry"/>.</param>
            <param name="modelOrPointedName">The path to the model this <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> references, or if <paramref name="isDerived"/> is true, the name of the <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> that this points to.</param>
            <param name="modelReferenceForSets">If the reference is a <see cref="T:com.threerings.opengl.model.config.StaticSetConfig"/>, this dictates the target default model.</param>
            <param name="isDerived">If true, this is a derived <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> and points to another instance.</param>
            <param name="width">The width of this tile, or null if it is not defined.</param>
            <param name="height">The height of this tile, or null if it is not defined.</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.FromData(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> and register it in <see cref="P:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig.TileLookup"/>.
            </summary>
            <param name="name">The name used in the lookup from a <see cref="T:com.threerings.tudey.data.TudeySceneModel.TileEntry"/>.</param>
            <param name="modelOrPointedName">The path to the model this <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> references, or if <paramref name="isDerived"/> is true, the name of the <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> that this points to.</param>
            <param name="modelReferenceForSets">If the reference is a <see cref="T:com.threerings.opengl.model.config.StaticSetConfig"/>, this dictates the target default model.</param>
            <param name="isDerived">If true, this is a derived <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> and points to another instance.</param>
            <param name="width">The width of this tile, or null if it is not defined.</param>
            <param name="height">The height of this tile, or null if it is not defined.</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Scene.IEntryHandler.HandleEntry(System.IO.FileInfo,com.threerings.tudey.data.TudeySceneModel.Entry,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},ThreeRingsSharp.Utility.Interface.DataTreeObject,com.threerings.math.Transform3D)">
            <summary>
            Handles a <see cref="T:com.threerings.tudey.data.TudeySceneModel.Entry"/> of a specific type.
            </summary>
            <param name="sourceFile">The file that contains the <see cref="T:com.threerings.tudey.data.TudeySceneModel"/> with the given <see cref="T:com.threerings.tudey.data.TudeySceneModel.Entry"/>.</param>
            <param name="entry">The <see cref="T:com.threerings.tudey.data.TudeySceneModel.Entry"/> to handle.</param>
            <param name="modelCollection">A list of every model that has been loaded.</param>
            <param name="dataTreeParent">An optional parameter for use in GUI Data Trees that will be populated with information about this model. This node will be one in the object hierarchy. Add properties to this to display these properties when it is selected, or add direct children to this.</param>
            <param name="globalTransform">Intended to be used by reference loaders, this specifies an offset for referenced models. All models loaded by this method in the given chain / hierarchy should have this transform applied to them.</param>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Scene.PlaceableHandler">
            <summary>
            Handles instances of <see cref="T:com.threerings.tudey.data.TudeySceneModel.PlaceableEntry"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Scene.PlaceableHandler.GetTransform(com.threerings.tudey.data.TudeySceneModel.PlaceableEntry)">
            <summary>
            Since Java allows for something that C# doesn't (a subclass having a field with the same name as a method in the parent class), this uses reflection to get the <c>transform</c> *field* of a <see cref="T:com.threerings.tudey.data.TudeySceneModel.PlaceableEntry"/>.<para/>
            Thanks, Java.
            </summary>
            <param name="entry">The <see cref="T:com.threerings.tudey.data.TudeySceneModel.PlaceableEntry"/> to get the transform of.</param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Scene.TileHandler">
            <summary>
            Handles instances of <see cref="T:com.threerings.tudey.data.TudeySceneModel.TileEntry"/>.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.TudeySceneConfigBrancher">
            <summary>
            A class that takes in a <see cref="T:com.threerings.tudey.data.TudeySceneModel"/> and handles the data appropriately.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.TudeySceneConfigBrancher.HandleDataFrom(System.IO.FileInfo,com.threerings.tudey.data.TudeySceneModel,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Boolean,com.threerings.math.Transform3D)">
            <summary>
            Sends an arbitrary <see cref="T:com.threerings.tudey.data.TudeySceneModel"/> into the data brancher and processes it.
            </summary>
            <param name="sourceFile">The file that the given <see cref="T:com.threerings.tudey.data.TudeySceneModel"/> came from.</param>
            <param name="scene">The <see cref="T:com.threerings.tudey.data.TudeySceneModel"/> itself.</param>
            <param name="models">A list containing every processed model from the entire hierarchy.</param>
            <param name="currentDataTreeObject">The current element in the data tree hierarchy to use.</param>
            <param name="useImplementation">If <see langword="false"/>, the name of the implementation will be displayed instead of the file name. Additionally, it will not have its implementation property.</param>
            <param name="transform">Intended to be used by reference loaders, this specifies an offset for referenced models. All models loaded by this method in the given chain / hierarchy will have this transform applied to them. If the value passed in is <see langword="null"/>, it will be substituted with a new <see cref="T:com.threerings.math.Transform3D"/>.</param>
        </member>
        <member name="T:ThreeRingsSharp.Utility.JavaClassNameStripper">
            <summary>
            A utility dedicated to taking in Java classnames and breaking them down into parts.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.JavaClassNameStripper.GetSplitClassName(java.lang.Class)">
            <summary>
            Returns a <see cref="T:System.String"/> array of the class name. This array always has a very specific structure:<para/>
            [0]=Class Name<para/>
            [1]=Subclass Name<para/>
            If a class does not have a subclass (denoted with a $ in Java classnames), the array will have a Length of 1. Returns <see langword="null"/> if the string does not have a locatable instance of '<c>.</c>'
            </summary>
            <param name="cls">The <see cref="T:java.lang.Class"/> to get the name of.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.JavaClassNameStripper.GetWholeClassName(java.lang.Class)">
            <summary>
            Returns a <see cref="T:System.String"/> that contains everything after the last index of <c>.</c>. This does not filter out subclasses (e.g. <c>MyClass0$MySubclass0</c>) and will return the string containing the $ and everything.<para/>
            Returns <see langword="null"/> if the string does not have a locatable instance of '<c>.</c>'
            </summary>
            <param name="cls">The <see cref="T:java.lang.Class"/> to get the name of.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.JavaClassNameStripper.GetBaseClassName(java.lang.Class)">
            <summary>
            An alias method that calls <see cref="M:ThreeRingsSharp.Utility.JavaClassNameStripper.GetSplitClassName(System.String)"/> and returns the first index (the base class name), or <see langword="null"/> if '<c>.</c>' could not be found in the <see cref="T:System.String"/>.
            </summary>
            <param name="cls">The <see cref="T:java.lang.Class"/> to get the name of.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.JavaClassNameStripper.GetSplitClassName(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> array of the class name. This array always has a very specific structure:<para/>
            [0]=Class Name<para/>
            [1]=Subclass Name<para/>
            If a class does not have a subclass (denoted with a $ in Java classnames), the array will have a Length of 1. Returns <see langword="null"/> if the string does not have a locatable instance of '<c>.</c>'
            </summary>
            <param name="className">The classname to parse.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.JavaClassNameStripper.GetWholeClassName(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that contains everything after the last index of <c>.</c>. This does not filter out subclasses (e.g. <c>MyClass0$MySubclass0</c>) and will return the string containing the $ and everything.<para/>
            Returns <see langword="null"/> if the string does not have a locatable instance of '<c>.</c>'
            </summary>
            <param name="className">The classname to parse.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.JavaClassNameStripper.GetBaseClassName(System.String)">
            <summary>
            An alias method that calls <see cref="M:ThreeRingsSharp.Utility.JavaClassNameStripper.GetSplitClassName(System.String)"/> and returns the first index (the base class name), or <see langword="null"/> if '<c>.</c>' could not be found in the <see cref="T:System.String"/>.
            </summary>
            <param name="className">The classname to parse.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.JavaClassNameStripper.RemoveSignature(System.String)">
            <summary>
            Given a classname with signatures included, this will remove the signature.<para/>
            This only works on classes that extend <see cref="T:java.lang.Object"/>, NOT primitive types!
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.AsyncMessageBox">
            <summary>
            Provides a method to asynchronously display a message box. Both methods will do nothing if this class's primary parameter, <see cref="P:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.IsInGUIContext"/>, is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.IsInGUIContext">
            <summary>
            If <see langword="false"/>, <see cref="M:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.ShowAsync(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)"/> will not do anything.<para/>
            This should be set to <see langword="true"/> in contexts where there is a GUI accompanied with the program.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.ShowAsync(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Asynchronously show a message box (show a message box without causing the GUI to stop updating, allowing stuff to work in the background).<para/>
            This also allows the user to interact with the GUI before closing the message box, as a side effect.<para/>
            This task will return <see langword="null"/> if <see cref="P:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.IsInGUIContext"/> is <see langword="false"/>!
            </summary>
            <param name="text">The text to display in the body of the message box.</param>
            <param name="title">The title displayed at the top of the message box.</param>
            <param name="buttons">The buttons used in the message box (e.g. OK)</param>
            <param name="icon">The icon to display on the left side of the message box.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Synchronously show a message box. This is virtually identical to calling <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)"/>, with the exception that it will return <see langword="null"/> if <see cref="P:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.IsInGUIContext"/> is <see langword="false"/>.<para/>
            Consider using <see cref="M:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.ShowAsync(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)"/> if you wish to allow the program to continue functioning and accept inputs while the dialog is open.
            </summary>
            <param name="text">The text to display in the body of the message box.</param>
            <param name="title">The title displayed at the top of the message box.</param>
            <param name="buttons">The buttons used in the message box (e.g. OK)</param>
            <param name="icon">The icon to display on the left side of the message box.</param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller">
            <summary>
            Handles click events for <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> by storing bindings from a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> to its identical <see cref="T:System.Windows.Forms.TreeNode"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller.ClearAllNodeBindings">
            <summary>
            Erases all node bindings created via <see cref="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller.RegisterTreeNodeBinding(ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Windows.Forms.TreeNode)"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller.RegisterTreeNodeBinding(ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Windows.Forms.TreeNode)">
            <summary>
            Registers a binding from a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> to a <see cref="T:System.Windows.Forms.TreeNode"/>.
            </summary>
            <param name="data"></param>
            <param name="node"></param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller.GetDataObjectOf(System.Windows.Forms.TreeNode)">
            <summary>
            Returns the <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> associated with the given <paramref name="node"/>, or <see langword="null"/> if one does not exist.
            </summary>
            <param name="node">The node used to find the equivalent <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/></param>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.DataTreeObject">
            <summary>
            A class that represents a data tree object. It is a basic container with a parent/child hierarchy as well as other applicable data.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent">
            <summary>
            The <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> that contains this instance, or null if this is a root instance.<para/>
            Setting this will update the children of the applicable objects (remove this from the children of the old parent (if applicable), add this to the children of the new parent (if applicable)) automatically.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.DataTreeObject._Parent">
            <summary>
            The internal reference of the parent. Do not change this internally, and instead change <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/>, as it properly updates the object hierarchy.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.DataTreeObject.Locked">
            <summary>
            If true, the <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/> property of this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> cannot be changed and will always be null.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Children">
            <summary>
            All <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>s that are first-level descendants of this object (this does NOT include nested objects).
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.DataTreeObject._Children">
            <summary>
            An internal reference to the children of this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.ImageKey">
            <summary>
            The image key for this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> which defines the icon displayed to the left of the item in the data tree.<para/>
            The default <see cref="T:ThreeRingsSharp.Utility.Interface.SilkImage"/> is <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generic"/> which represents a generic hierarchy element.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Text">
            <summary>
            The text displayed in the data tree for this object.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.DisplaySingleChildInline">
            <summary>
            Internal compatibility for casts between this and <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/>
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.CreatedFromProperty">
            <summary>
            If true, this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> was cast from a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties">
            <summary>
            The properties of this object. When the associated node is selected, the properties menu will update.<para/>
            The method in which this is displayed is via creating the given <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>s in the Properties menu hierarchy, and then adding a child with no icon containing the associated <see langword="string"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ClearAllChildren">
            <summary>
            Iterates through all children of this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> and sets their <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/> property to <see langword="null"/>.<para/>
            This preserves the hierarchy of the children, so if a child object has its own children, their <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/>s will remain unchanged.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.Dispose">
            <summary>
            Sets the <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/> property of this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> to <see langword="null"/>, locks the <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/> property, and then calls <see cref="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.Dispose"/> on all children.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.AddChild(ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Adds the given child to this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>'s children.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.RemoveChild(ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Removes the given child from this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>'s children.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ToTreeNode">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> into a <see cref="T:System.Windows.Forms.TreeNode"/>. This does NOT add any children. If you need to keep the hierarchy, use <see cref="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ConvertHierarchyToTreeNodes"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ConvertHierarchyToTreeNodes">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> and all children into an identical hierarchy of <see cref="T:System.Windows.Forms.TreeNode"/> objects, and then returns this object as a <see cref="T:System.Windows.Forms.TreeNode"/> with all of the proper children.<para/>
            This also connects events to being clicked so that they fire the associated events in <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.CreateHierarchy(ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Windows.Forms.TreeNode)">
            <summary>
            The internal variant of <see cref="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ConvertHierarchyToTreeNodes"/> that handles the recursion.
            </summary>
            <param name="current"></param>
            <param name="targetParent"></param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.AddSimpleProperty(System.String,System.Object,ThreeRingsSharp.Utility.Interface.SilkImage,ThreeRingsSharp.Utility.Interface.SilkImage,System.Boolean)">
            <summary>
            An alias method used to add a property with a generic icon to <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/> (omitting the need to create a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>)<para/>
            If the object array is a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/> instance, that instance will be used.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value displayed under the property.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.AddSimpleProperty(System.String,System.Object[],ThreeRingsSharp.Utility.Interface.SilkImage,ThreeRingsSharp.Utility.Interface.SilkImage,System.Boolean)">
            <summary>
            An alias method used to add a property with a generic icon to <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/> (omitting the need to create a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>)<para/>
            If the object array contains any <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/> instances, those instances will be used (and <paramref name="propertyValueImages"/> will be overridden where applicable).
            </summary>
            <param name="name">The name of the property.</param>
            <param name="values">The values displayed under the property.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.EditSimpleProperty(System.String,System.String,System.Object,System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{System.Boolean})">
            <summary>
            Attempts to locate a property with the given name, and then updates its values. This will do nothing if the property cannot be found.<para/>
            Any <see langword="null"/> parameters will retain their existing values.
            </summary>
            <param name="name">The name to search for.</param>
            <param name="newName">If <see langword="null"/>, the name will remain unchanged. If defined, the name of the property will be changed to this.</param>
            <param name="value">The new value to set the property to.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.EditSimpleProperty(ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty,System.String,System.Object,System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{System.Boolean})">
            <summary>
            Updates the property with the given data.<para/>
            Any <see langword="null"/> parameters will retain their existing values.
            </summary>
            <param name="key">The property to edit.</param>
            <param name="newName">If <see langword="null"/>, the name will remain unchanged. If defined, the name of the property will be changed to this.</param>
            <param name="value">The new value to set the property to.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.EditSimpleProperty(System.String,System.String,System.Object[],System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{System.Boolean})">
            <summary>
            Attempts to locate a property with the given name, and then updates its values. This will do nothing if the property cannot be found.<para/>
            Any <see langword="null"/> parameters will retain their existing values.
            </summary>
            <param name="name">The name to search for.</param>
            <param name="newName">If defined, the name of the property will be changed to this.</param>
            <param name="values">The new values to set the property to.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.EditSimpleProperty(ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty,System.String,System.Object[],System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{System.Boolean})">
            <summary>
            Updates the property with the given data. If the property does not exist, it will be added.<para/>
            Any <see langword="null"/> parameters will retain their existing values.
            </summary>
            <param name="key">The property to edit.</param>
            <param name="newName">If defined, the name of the property will be changed to this.</param>
            <param name="values">The new values to set the property to.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.FindSimpleProperty(System.String)">
            <summary>
            Locates a given <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/> in <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/> whose key is the given <paramref name="name"/>.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.DeleteSimpleProperty(System.String)">
            <summary>
            Deletes a given <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/> from <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/>.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.#ctor(ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>.
            </summary>
            <param name="parent">The parent <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> to add this object to.</param>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty">
            <summary>
            Represents a simpler variant of <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> storing text and an image. It cannot have children.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.Text">
            <summary>
            The text displayed in the data tree for this object.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.DisplaySingleChildInline">
            <summary>
            If <see langword="true"/>, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).<para/>
            This object must be a key in a <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/> for this to do anything. When the GUI system creates the properties menu, if this property object has one associated child value, it will display inline if this is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.ImageKey">
            <summary>
            The image key for this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> which defines the icon displayed to the left of the item in the data tree.<para/>
            The default <see cref="T:ThreeRingsSharp.Utility.Interface.SilkImage"/> is <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generic"/> which represents a generic hierarchy element.<para/>
            The "Silk" term comes from the creator of the images, see https://famfamfam.com/
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.CreatedFromFullObject">
            <summary>
            If true, this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/> was cast from a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.ToTreeNode">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> into a <see cref="T:System.Windows.Forms.TreeNode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.#ctor(System.String,ThreeRingsSharp.Utility.Interface.SilkImage,System.Boolean)">
            <summary>
            Construct a new property with empty string and the <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Value"/> image.
            </summary>
            <param name="text">The text to display in this property.</param>
            <param name="imageKey">The image to display to the left of the text.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>). In the case of this constructor, this object must be a key in a <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/>. When the GUI system creates the properties menu, if this property object has one associated child value, it will display inline as mentioend prior.</param>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.SilkImage">
            <summary>
            An enum that represents the available icons in the data tree. Certain images are not part of the stock Silk image package.<para/>
            Silk Images come from https://famfamfam.com/ <para/>
            Note to self: Keep this list updated, and ensure its order is identical to the order in which they are defined by the generated code.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generic">
            <summary>
            A blue square representing a generic object. Intended to represent an object of an unknown type.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Object">
            <summary>
            An icon of a data tree with a single parent object containing two children. An alternative to <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generic"/> that serves the same purpose.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Scene">
            <summary>
            A picture of a the globe, intended to represent an entire scene, specifically a <see cref="T:com.threerings.opengl.scene.Scene"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Sky">
            <summary>
            A picture of the sky, intended to represent a skybox object, specifically a <see cref="T:com.threerings.opengl.scene.config.ViewerEffectConfig.Skybox"/>
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Model">
            <summary>
            A wooden box representing an entire model. Intended to represent a model.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.ModelSet">
            <summary>
            A set of three bricks, each with a unique color. Intended to represent a set of several models grouped together.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Articulated">
            <summary>
            An icon of a person. Intended to represent articulated models, which have bones and often animations, specifically a <see cref="T:com.threerings.opengl.model.config.ArticulatedConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Billboard">
            <summary>
            An icon of an application window. Intended to represent a billboard GUI element.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Static">
            <summary>
            A single building brick. Intended to represent a static model (just geometry and nothing else), specifically a <see cref="T:com.threerings.opengl.model.config.StaticConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.MergedStatic">
            <summary>
            A set of three building bricks. Intended to represent a bulk collection of several static models, specifically a <see cref="T:com.threerings.opengl.model.config.MergedStaticConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Sound">
            <summary>
            A picture of a speaker. Intended to represent a sound emitter object.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Attachment">
            <summary>
            A picture of an electric plug. Intended to represent an external object that attaches to another model in its current context, for instance, the Thwacker Gremlin model has an attachment for their hammer. The hammer should use this icon in this context.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Derived">
            <summary>
            A picture of two objects with arrows pointing between them. Intended to represent a derived model class, specifically a <see cref="T:com.threerings.opengl.model.config.ModelConfig.Derived"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Conditional">
            <summary>
            A picture of an arrow that diverges. Intended to represent an element that determines conditional attributes in gameplay, specifically a <see cref="T:com.threerings.opengl.model.config.ConditionalConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.CameraShake">
            <summary>
            A picture of a camera with a small lightning bolt in the lower right corner. Intended to represent an element that causes the user's camera to shake in gameplay.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generated">
            <summary>
            A picture of a PC with a small plus symbol in the lower right corner. Intended to represent a model that is generated on the fly from a set of parameters.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Schemed">
            <summary>
            A picture of an application window with a small pencil in the lower right corner. Intended to represent a schemed object, specifically a <see cref="T:com.threerings.opengl.model.config.ModelConfig.Schemed"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.SchemedModel">
            <summary>
            A picture of a single building brick with a small pencil in the lower right corner. Intended to represent a schemed model, specifically a <see cref="T:com.threerings.opengl.model.config.ModelConfig.SchemedModel"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Scheme">
            <summary>
            A picture of a computer monitor with a small pencil in the lower right corner. This is intended to represent an actual render scheme. This should be used on any instances of a class like <see cref="T:com.threerings.opengl.scene.config.ViewerEffectConfig"/> that have no model reference and are direct descendants to a <see cref="T:com.threerings.opengl.model.config.ModelConfig.Schemed"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Animation">
            <summary>
            A picture of a snippet of film. Intended to represent an animation, specifically a <see cref="T:com.threerings.opengl.model.config.AnimationConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Scripted">
            <summary>
            Intended to represent a scene object that has code running within it, usually for gameplay purposes.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.TimeAction">
            <summary>
            Intended to represent an extension of <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Scripted"/> that runs on a timer <see cref="T:com.threerings.opengl.model.config.ScriptedConfig.TimeAction"/>
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Config">
            <summary>
            A generic icon of a cog. Used for any extra data that is best described as configuration data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Shading">
            <summary>
            A generic icon of diagonal hashes. Internally this is used to represent fog.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Reference">
            <summary>
            An icon of a hand pointing to a miniature variant of <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.ModelSet"/>, intended to represent an external reference to another model.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Array">
            <summary>
            An icon of a piece of paper with a blue &lt;&gt; pattern on it.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Texture">
            <summary>
            An icon of a framed picture intended to represent an image texture.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Variant">
            <summary>
            An icon of a cardboard box intended to represent a variation of a model.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Light">
            <summary>
            A picture of a lightbulb. Intended to represent a source of light.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Value">
            <summary>
            A picture of a hand pointing to a text box containing an arbitrary value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Triangle">
            <summary>
            A blue triangle, intended to represent more rudimentary components of models (e.g. sub-models in a static model).
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Tile">
            <summary>
            A green square of grass that represents a tile in a <see cref="T:com.threerings.tudey.data.TudeySceneModel"/>
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Matrix">
            <summary>
            A 3x3 grid of blocks within square brackets [ ] that represents a transformation matrix, intended for <see cref="T:com.threerings.math.Transform3D"/>
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Missing">
            <summary>
            A transparent red building brick intended to represent a missing asset.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Tag">
            <summary>
            A tag, like a cardboard price tag that hangs off of an object.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.None">
            <summary>
            A transparent space.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.Utility.ResourceDirectoryGrabber">
            <summary>
            A utility class that looks at directory information to try to find the rsrc folder.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.ResourceDirectory">
            <summary>
            A reference to the rsrc directory.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.ResourceDirectoryPath">
            <summary>
            Returns <see cref="P:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.ResourceDirectory"/> as its string path. It will always end in a slash. This enforces the use of forward slashes (/) so that it works with <see cref="T:com.threerings.opengl.model.config.CompoundConfig"/> references.<para/>
            Returns <see langword="null"/> if <see cref="P:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.ResourceDirectory"/> is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.GetFormattedPathFromRsrc(System.IO.FileInfo,System.Boolean,System.Boolean,System.Char)">
            <summary>
            Takes <paramref name="fileIn"/> and climbs up its directory tree until it locates a folder named <c>rsrc</c>. It will then return the path starting from rsrc and ending at this file.
            </summary>
            <param name="fileIn">The file that is presumably a descendant of the rsrc directory.</param>
            <param name="includeRsrc">If <see langword="false"/>, the directory path will NOT start with <c>rsrc/</c>.</param>
            <param name="removeExtension">If <see langword="true"/>, the extension to the file given will be removed from the returned string.</param>
            <param name="separator">The character used to separate directories.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.GetDirectoryDepth(System.IO.FileInfo,System.Int32,System.Boolean,System.Char)">
            <summary>
            Returns a path that uses forward slashes, going <paramref name="depth"/> folders up. A depth of 1 will return the parent directory, a depth of 2 will return the parent of the parent directory, and so on. A depth of -1 will go all the way to rsrc.
            </summary>
            <param name="fileIn">The file that is presumably a descendant of the rsrc directory.</param>
            <param name="depth">How many parent folders to go up.</param>
            <param name="removeExtension">If <see langword="true"/>, the extension to the file given will be removed from the returned string.</param>
            <param name="separator">The character used to separate directories.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if depth is 0.</exception>
        </member>
        <member name="M:ThreeRingsSharp.Utility.TextureGrabber.GetFullTexturePath(System.IO.FileInfo,System.String)">
            <summary>
            A utility method that, when given the directory of a model file and a texture name, will attempt to locate a given texture.
            </summary>
            <param name="sourceFile"></param>
            <param name="textureName"></param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.Utility.VersionInfoScraper">
            <summary>
            A hacky class that can read the raw binary of a Clyde file and find its implementation.<para/>
            When files are read by <see cref="T:com.threerings.export.BinaryImporter"/>, their implementation is cast into a <see cref="T:java.lang.Class"/>, or is made null if that implementation doesn't exist. This is particularly problematic for Spiral Knights, where player knight models use the unique <c>ProjectXModelConfig</c> that does not exist in this library since Spiral Knights defines it instead. This class allows us to see that it's using this class.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.VersionInfoScraper.HackyGetImplementation(System.IO.FileInfo,System.Boolean)">
            <summary>
            A very hacky method of returning the implementation of this model in its string form so that if Clyde can't read it, we can still see its name. This returns the full class name.<para/>
            This is only functional for extensions of <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
            <param name="datFile"></param>
            <param name="isCompressed"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.VersionInfoScraper.IsValidClydeFile(System.IO.FileInfo)">
            <summary>
            Returns <see langword="true"/> if the input <see cref="T:System.IO.FileInfo"/> represents a file exported by Clyde. This tests the header of the file.
            </summary>
            <param name="datFile"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.VersionInfoScraper.GetCosmeticInformation(System.IO.FileInfo)">
            <summary>
            Returns three <see langword="string"/>, in order, the compression status (as a <see langword="string"/>, "Yes" or "No"), the version name (user friendly), and the implementation.
            </summary>
            <param name="clydeFile"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.VersionInfoScraper.GetDat(System.IO.FileInfo)">
            <summary>
            Handles the input <see cref="T:System.IO.FileInfo"/> as if it's a binary .DAT file.
            </summary>
            <param name="clydeFile"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.VersionInfoScraper.GetXML(System.IO.FileInfo)">
            <summary>
            Handles the input <see cref="T:System.IO.FileInfo"/> as if it's an XML file.
            </summary>
            <param name="clydeFile"></param>
            <returns></returns>
        </member>
        <member name="P:ThreeRingsSharp.Utility.XanLogger.Log">
            <summary>
            Intended for exporting the log to a text file. This <see cref="T:System.Text.StringBuilder"/> will contain the entire log.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.XanLogger.LogWhileNotUpdating">
            <summary>
            The log while <see cref="P:ThreeRingsSharp.Utility.XanLogger.UpdateAutomatically"/> is false and it's written to (this is used to append all of the data when <see cref="M:ThreeRingsSharp.Utility.XanLogger.UpdateLog"/> is called)
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.XanLogger.VerboseLogging">
            <summary>
            If <see langword="true"/>, verbose log entries will be posted in the log. Its default value is equal to <see cref="F:ThreeRingsSharp.Utility.XanLogger.IsDebugMode"/>, but can be set at any time.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.XanLogger.IsDebugMode">
            <summary>
            Represents whether or not the program is running in Debug mode.<para/>
            Current State: <see langword="true"/>
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.XanLogger.UpdateAutomatically">
            <summary>
            If <see langword="true"/>, the textbox will be updated to display new text the moment it is written. If <see langword="false"/>, <see cref="M:ThreeRingsSharp.Utility.XanLogger.UpdateLog"/> can be called, which will copy the contents of <see cref="P:ThreeRingsSharp.Utility.XanLogger.Log"/> and append it to the textbox.<para/>
            Setting this to true will cause <see cref="M:ThreeRingsSharp.Utility.XanLogger.UpdateLog"/> to run.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.XanLogger.BoxReference">
            <summary>
            A reference to a textbox that should store the contents of the log in a GUI application.<para/>
            This should be an instance of <see cref="T:System.Windows.Forms.RichTextBox"/> for proper function. It can be <see langword="null"/> if there is no GUI.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.XanLogger.WasAtBottom">
            <summary>
            If true, the box *was* at the bottom before text was appended to it (meaning it should autoscroll)
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.XanLogger.UpdateLog">
            <summary>
            Manually update the contents of <see cref="P:ThreeRingsSharp.Utility.XanLogger.BoxReference"/>. Only works if <see cref="P:ThreeRingsSharp.Utility.XanLogger.UpdateAutomatically"/> is <see langword="false"/>, and of course, if <see cref="P:ThreeRingsSharp.Utility.XanLogger.BoxReference"/> is not <see langword="null"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.XanLogger.WriteLine(System.Boolean)">
            <summary>
            Append a new line to the log.
            </summary>
            <param name="isVerbose">If true, this is treated as a verbose log entry, which will not be appended to the log if <see cref="P:ThreeRingsSharp.Utility.XanLogger.VerboseLogging"/> is false.</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.XanLogger.WriteLine(System.Object,System.Boolean)">
            <summary>
            Append the given text to the log and advance by one line.
            </summary>
            <param name="obj"></param>
            <param name="isVerbose">If true, this is treated as a verbose log entry, which will not be appended to the log if <see cref="P:ThreeRingsSharp.Utility.XanLogger.VerboseLogging"/> is false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ThreeRingsSharp.Utility.XanLogger.Write(System.Object,System.Boolean)">
            <summary>
            Append the given text to the log.
            </summary>
            <param name="obj">The text to write to the log.</param>
            <param name="isVerbose">If true, this is treated as a verbose log entry, which will not be appended to the log if <see cref="P:ThreeRingsSharp.Utility.XanLogger.VerboseLogging"/> is false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ThreeRingsSharp.Utility.XanLogger.Clear">
            <summary>
            Clears all text from the log. This also wipes <see cref="P:ThreeRingsSharp.Utility.XanLogger.Log"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.RichTextBoxUtil.IsScrolledToBottom(System.Windows.Forms.RichTextBox)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:System.Windows.Forms.RichTextBox"/> is scrolled to the bottom, and <see langword="false"/> if it is not.
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.RichTextBoxUtil.AppendText(System.Windows.Forms.RichTextBox,System.String,System.Drawing.Color)">
            <summary>
            Appends colored text to the box.
            </summary>
            <param name="box"></param>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException">
            <summary>
            An exception that is thrown when a critical read error occurs when trying to process files.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException.ErrorWindowTitle">
            <summary>
            The title that should be displayed in the <see cref="T:System.Windows.Forms.MessageBox"/> if this is sent to a GUI.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException.ErrorWindowIcon">
            <summary>
            The icon that should be displayed in the <see cref="T:System.Windows.Forms.MessageBox"/> if this is sent to a GUI.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException.#ctor(System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException"/> with the optional given title and icon, intended for use in GUI displays of this error.
            </summary>
            <param name="message">The message to display for this error.</param>
            <param name="title">The title to display for this error in a GUI.</param>
            <param name="icon">The icon to use in the GUI.</param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Exceptions.InvalidTypeException">
            <summary>
            An exception thrown when a method that handles an arbitrary class type receives a type that is invalid for the given context (but is otherwise within constraints defined by the language)
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Extensions.ChoiceExtensions">
            <summary>
            As mentioned in <see cref="M:com.threerings.config.Parameter.Choice.getChoiceOptions"/>'s customized error, IKVM was unable to correctly convert this method.<para/>
            This static class houses an extension method that fixes this.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.ChoiceExtensions.GetChoiceOptions(com.threerings.config.Parameter.Choice)">
            <summary>
            A patched variant of <see cref="M:com.threerings.config.Parameter.Choice.getChoiceOptions"/> that doesn't commit <see href="https://www.youtube.com/watch?v=Lebv2-ptzWY"/> when you call it.<para/>
            This returns a string array of every option name that displays in the dropdown menu of the ThreeRings Model Editor, should there be a multi-choice option on a model.
            </summary>
            <param name="choice"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.ChoiceExtensions.GetDefaultOption(com.threerings.config.Parameter.Choice)">
            <summary>
            Returns the default option of this choice.
            </summary>
            <param name="choice"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.TileEntryExtensions.GetTransformFromShallow(com.threerings.tudey.data.TudeySceneModel.TileEntry,ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig,com.threerings.math.Transform3D@)">
            <summary>
            Populates <paramref name="result"/> with the location data from the given <see cref="T:com.threerings.tudey.data.TudeySceneModel.TileEntry"/> and <see cref="T:ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig"/> (instead of by trying to reference the original implementation)
            </summary>
            <param name="entry"></param>
            <param name="shallowTile"></param>
            <param name="result"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.TileEntryExtensions.GetWidth(com.threerings.tudey.data.TudeySceneModel.TileEntry,ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig)">
            <summary>
            Gets the width of this tile, but factors in the rotation of the tile too.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.TileEntryExtensions.GetHeight(com.threerings.tudey.data.TudeySceneModel.TileEntry,ThreeRingsSharp.DataHandlers.Scene.Data.ShallowTileConfig)">
            <summary>
            Gets the height of this tile, but factors in the rotation of the tile too.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Extensions.EnumerableExtension">
            <summary>
            Provides methods that are nice for <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.KeyOf``2(System.Collections.Generic.Dictionary{``0,``1},``1)">
            <summary>
            Returns the key of the given value within <paramref name="dictionary"/>.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the value does not exist in this dictionary, and by extension, has no associated key.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.KeyOf``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``1)">
            <summary>
            Returns the key of the given value within <paramref name="dictionary"/>.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the value does not exist in this dictionary, and by extension, has no associated key.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.GetOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value stored in the <see cref="T:System.Collections.Generic.Dictionary`2"/>, or <paramref name="def"/> if the item could not be found.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.GetOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value stored in the <see cref="T:System.Collections.Generic.Dictionary`2"/>, or <paramref name="def"/> if the item could not be found.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.ContainsValueOfType``2(System.Collections.Generic.Dictionary{``0,``1},System.Type)">
            <summary>
            Returns <see langword="true"/> if the given <see cref="T:System.Collections.Generic.Dictionary`2"/> contains a value whose type is assignable to (can be cast into) <paramref name="valueType"/>, and <see langword="false"/> if it does not.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.ContainsValueOfType``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Type)">
            <summary>
            Returns <see langword="true"/> if the given <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> contains a value whose type is assignable to (can be cast into) <paramref name="valueType"/>, and <see langword="false"/> if it does not.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.Remove``2(System.Collections.Generic.Dictionary{``0,``1},``1)">
            <summary>
            Removes the given <typeparamref name="TValue"/> (and its associated <typeparamref name="TKey"/>) from the given <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="value"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.SetFrom``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sets the contents of the given <see cref="T:System.Collections.Generic.List`1"/> to the given content.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="values"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.CopyToList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Similar to <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/> but for <see cref="T:System.Collections.Generic.List`1"/>s.<para/>
            If the offset is larger than the size of the list, the empty space will be filled with <see langword="default"/>.<para/>
            If the offset is somewhere within the list, it will overwrite elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="list"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.SetListCap``1(System.Collections.Generic.List{System.Object},``0,System.Int32)">
            <summary>
            A utility designed exclusively for the glTF exporter which can populate a list with the given default value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="defaultValue"></param>
            <param name="values"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.ShallowClone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Clones this <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a new instance.
            If <typeparamref name="T"/> implements <see cref="T:System.ICloneable"/>, then the 
            <see cref="M:System.ICloneable.Clone"/> method will be called on each object.<para/>
            
            This does not clone nested lists.
            </summary>
            <typeparam name="T">The type of the elements contained within the <see cref="T:System.Collections.Generic.List`1"/></typeparam>
            <param name="original">The list to clone the data from.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.As2D``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Converts this <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a 2D array of <typeparamref name="T"/>, where the second dimension's size is <paramref name="groupSize"/>. For instance, calling this on an array of 16 items with an argument of 8 will return a 2D array with 2 elements in the first dimension, and 8 in the second dimension.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="groupSize">The size of the second dimension of the array.</param>
            <returns></returns>
            <exception cref="T:System.DataMisalignedException">Thrown if the length of the given <paramref name="enumerable"/> is not divisible by <paramref name="groupSize"/>.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.GetSecondDimensionAt``1(``0[0:,0:],System.Int32)">
            <summary>
            Given an <paramref name="index"/>, this will return the second dimension of the 2D array. If the 2D array were constructed as an array of arrays, this would be the equivalent to getting array[x] in array[x][y].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array2D"></param>
            <param name="index">The index in the first dimension corresponding to the desired second dimension.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the given index is out of the range fo the array.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.ToIntArray(System.Single[])">
            <summary>
            A very specialized method designed specifically for <see cref="T:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator"/> which converts a float array to an int array.
            </summary>
            <param name="floatArray"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.EnumerableExtension.GetEntryByName(com.threerings.config.ManagedConfig[],System.String)">
            <summary>
            Finds the instance in the array of <see cref="T:com.threerings.config.ManagedConfig"/> instances with the given name by calling their <see cref="M:com.threerings.config.ManagedConfig.getName"/> method.
            </summary>
            <param name="array"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Extensions.StringExtensions">
            <summary>
            Provides some handy extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.StringExtensions.AfterIndexOf(System.String,System.String)">
            <summary>
            Returns a <see langword="string"/> of everything after the first located instance of <paramref name="text"/>. This does not include the sequence. For instance, if the text <c>cool.beans.nice.meme</c> is input and the method is called with a parameter of <c>nice.</c> for <paramref name="text"/>, the return value will be <c>meme</c><para/>
            Returns <see langword="null"/> if <paramref name="text"/> could not be found.
            </summary>
            <param name="str">The string to search.</param>
            <param name="text">The text to locate.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.StringExtensions.AfterLastIndexOf(System.String,System.String)">
            <summary>
            Returns a <see langword="string"/> of everything after the last located instance of <paramref name="text"/>. This does not include the sequence. For instance, if the text <c>cool.beans.nice.meme</c> is input and the method is called with a parameter of <c>nice.</c> for <paramref name="text"/>, the return value will be <c>meme</c><para/>
            Returns <see langword="null"/> if <paramref name="text"/> could not be found.
            </summary>
            <param name="str">The string to search.</param>
            <param name="text">The text to locate.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.StringExtensions.BetweenBrackets(System.String)">
            <summary>
            Looks for the first instance of text between square brackets [like this] and returns that string, or <see langword="null"/> if it couldn't be found.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.StringExtensions.SnakeToCamel(System.String)">
            <summary>
            Converts a snake_case_string to a camelCaseString
            </summary>
            <param name="snakeCaseString"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.StringExtensions.IsAlphanumeric(System.String)">
            <summary>
            Returns true if the string is alphanumeric, or, if it is within the range of a-z, A-Z, and 0-9.
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.StringExtensions.WriteASCIIToByteArray(System.String,System.Byte[]@,System.Int32)">
            <summary>
            Formats the given string to an ASCII string and then writes it to the array, starting at the given offset.<para/>
            Throws <see cref="T:System.IndexOutOfRangeException"/> if the array is too short to contain the string.
            </summary>
            <param name="str">The string to write.</param>
            <param name="array">The array to write the string into.</param>
            <param name="offset">The index to start writing at.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.TransformExtensions.GetAllTransforms(com.threerings.math.Transform3D)">
            <summary>
            Returns all components of this transform in the order of <c>translation, rotation, scale (as Vector3f), scale (as float)</c>.
            </summary>
            <param name="trs"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.TransformExtensions.RotateOnAxis(com.threerings.math.Transform3D,ThreeRingsSharp.XansData.Structs.Axis,System.Single)">
            <summary>
            Rotates the given <see cref="T:com.threerings.math.Transform3D"/> on the given <paramref name="axis"/> by the given <paramref name="rotation"/> (which is in radians)<para/>
            Returns the same <see cref="T:com.threerings.math.Transform3D"/> that this was called on for ease in chaining.
            </summary>
            <param name="trs">The translation to alter.</param>
            <param name="axis">The axis to rotate on.</param>
            <param name="rotation">The amount of radians to rotate.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.TransformExtensions.RotateOnAxisDegrees(com.threerings.math.Transform3D,ThreeRingsSharp.XansData.Structs.Axis,System.Single)">
            <summary>
            Rotates the given <see cref="T:com.threerings.math.Transform3D"/> on the given <paramref name="axis"/> by the given <paramref name="rotation"/> (which is in degrees)<para/>
            Returns the same <see cref="T:com.threerings.math.Transform3D"/> that this was called on for ease in chaining.
            </summary>
            <param name="trs">The translation to alter.</param>
            <param name="axis">The axis to rotate on.</param>
            <param name="rotation">The amount of radians to rotate.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.TransformExtensions.Clone(com.threerings.math.Transform3D)">
            <summary>
            Clones this <see cref="T:com.threerings.math.Transform3D"/> into a new instance with the same data.
            </summary>
            <param name="trs"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Extensions.TransformExtensions.RotateToUpAxis(com.threerings.math.Quaternion,ThreeRingsSharp.XansData.Structs.Axis)">
            <summary>
            Returns a new <see cref="T:com.threerings.math.Quaternion"/> which is <paramref name="quat"/> but rotated so that 
            </summary>
            <param name="quat"></param>
            <param name="targetUpAxis"></param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.FileUtils">
            <summary>
            Offers better file control methods.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.FileUtils.OpenWriteNew(System.IO.FileInfo)">
            <summary>
            Identical to <see cref="M:System.IO.FileInfo.OpenWrite"/>, but this will completely erase the file and rewrite it from scratch.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.ICloneable`1">
            <summary>
            Represents an <see langword="object"/> or <see langword="struct"/> that can be cloned into a new instance with all-new data.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ThreeRingsSharp.XansData.ICloneable`1.Clone">
            <summary>
            Clone this object into a new instance of the same type where all contained data is completely separate from the original object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter">
            <summary>
            Represents a class that can export data in a specific 3D model format.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.AbstractModelExporter.TOOL">
            <summary>
            A message accompanied with all exports describing the tool used to export the model.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.AbstractModelExporter.Export(ThreeRingsSharp.XansData.Model3D[],System.IO.FileInfo)">
            <summary>
            Exports the data stored in the given <see cref="T:ThreeRingsSharp.XansData.Model3D"/>(s) to the given file.
            </summary>
            <param name="models">The models that should be exported.</param>
            <param name="toFile">The file to write the data to.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.AbstractModelExporter.#ctor">
            <summary>
            A generic constructor for <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/>. Required for the factory to interface with this class properly.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType">
            <summary>
            Represents a component type in glTF for use in accessors.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.BYTE">
            <summary>
            A <see langword="sbyte"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.UNSIGNED_BYTE">
            <summary>
            A <see langword="byte"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.SHORT">
            <summary>
            A <see langword="short"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.UNSIGNED_SHORT">
            <summary>
            A <see langword="ushort"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.UNSIGNED_INT">
            <summary>
            An <see langword="int"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.FLOAT">
            <summary>
            A <see langword="float"/> value.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.GLTFType">
            <summary>
            Represents a type in glTF for use in accessors.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.SCALAR">
            <summary>
            A scalar value, which contains a single component.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.VEC2">
            <summary>
            A Vector2 value, which contains 2 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.VEC3">
            <summary>
            A Vector3 value, which contains 3 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.VEC4">
            <summary>
            A Vector4 value, which contains 4 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.MAT2">
            <summary>
            A MAT2 value (2x2 transformation matrix), which contains 4 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.MAT3">
            <summary>
            A MAT3 value (3x3 transformation matrix), which contains 9 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.MAT4">
            <summary>
            A MAT4 value (4x4 transformation matrix), which contains 16 components.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter">
            <summary>
            Represents a GLTF file and its associated data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.MAGIC_NUMBER">
            <summary>
            The unique header ID describing glTF files. This is the ASCII string "glTF".
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.VERSION">
            <summary>
            The glTF spec version.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.EmbedTextures">
            <summary>
            If <see langword="true"/>, any textures referenced by models will be imported into the glTF file as raw binary data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.JSONData">
            <summary>
            The JSON data for this glTF file.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.GetPaddedJSONData">
            <summary>
            Converts <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.JSONData"/> into a JSON String using <see cref="T:Newtonsoft.Json.JsonConvert"/>, and then ensures it's aligned to a four-byte boundary as mandated by glTF 2.0 standards.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.GetImageData(System.IO.FileInfo)">
            <summary>
            Reads an image file and returns its data + mime type
            </summary>
            <param name="imageFile"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.GetJSONBuffer">
            <summary>
            Returns the fully-formatted JSON data buffer, ready to be written into the file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor">
            <summary>
            Provides access to a <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.ThisIndex">
            <summary>
            Used as a tricky method of referencing this accessor in a node. This is the index of the accessor itself in the json data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.BufferView">
            <summary>
            The <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView"/> this points to.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.ComponentType">
            <summary>
            The data type of the value stored in this <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.Count">
            <summary>
            The amount of values stored within this object.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.Max">
            <summary>
            NOTE: Cast these values into their appropriate type as dictated by <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.ComponentType"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.Min">
            <summary>
            NOTE: Cast these values into their appropriate type as dictated by <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.ComponentType"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.Type">
            <summary>
            The type of model data this accessor represents, which determines is size.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAsset">
            <summary>
            Represents raw asset data for this glTF file, such as the version it's using and the tool that created the file.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAsset.VERSION">
            <summary>
            The version of glTF that this was designed with.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAsset.GENERATOR">
            <summary>
            The tool that this glTF file was generated with.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBuffer">
            <summary>
            Represents a binary data buffer.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBuffer.ByteLength">
            <summary>
            The amount of bytes in this buffer.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView">
            <summary>
            Represents a subsection of a complete data buffer.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView.ThisIndex">
            <summary>
            Used as a tricky method of referencing this accessor in a node. This is the index of the accessor itself in the json data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView.Buffer">
            <summary>
            The ID of the buffer to browse.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView.ByteLength">
            <summary>
            The length of the view in bytes (how many bytes this view "contains")
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView.ByteOffset">
            <summary>
            The offset of the first byte in this view
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFImage">
            <summary>
            Represents an image, usually for a texture.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFImage.ThisIndex">
            <summary>
            Used as a tricky method of referencing this accessor in a node. This is the index of the accessor itself in the json data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFImage.BufferView">
            <summary>
            The location of this image in the buffer.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot">
            <summary>
            The raw json data container.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Asset">
            <summary>
            Asset information for this glTF file.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Buffers">
            <summary>
            A list of all buffers stored in this glTF file.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.BufferViews">
            <summary>
            Scopes within the <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Buffers"/> that point to a specific subsection of a given buffer.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Accessors">
            <summary>
            Objects that allow model systems to read from one of the <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.BufferViews"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Meshes">
            <summary>
            A mesh in this glTF file. Represents raw mesh data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Nodes">
            <summary>
            An object in this glTF file. Represents an object which can contain mesh data and other applicable information.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Images">
            <summary>
            A list of references to images in this glTF file.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Samplers">
            <summary>
            A list of samplers, which determine how images are applied to meshes.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Textures">
            <summary>
            A list of textures, which are used to apply images to meshes.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Materials">
            <summary>
            A list of materials.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Scene">
            <summary>
            The scene to use. Points to an entry in <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Scenes"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFJSONRoot.Scenes">
            <summary>
            One or more scenes, which contains groups of geometry and other information.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFMaterial.Name">
            <summary>
            The name of this material.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFMaterial.PbrMetallicRoughness">
            <summary>
            The metallic roughness determining factor. This also stores the base texture.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFMaterial.AlphaMode">
            <summary>
            The alpha mode of this material. OPAQUE means alpha is ignored, MASK means there is an alpha mask image attached, and BLEND uses image alpha.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFMesh">
            <summary>
            Represents raw mesh data, which stores triangles, normals, uvs, and indices, alongside other mesh-related data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFMesh.ThisIndex">
            <summary>
            The index of this mesh in glTF data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Name">
            <summary>
            The name of this object as it appears in the 3D editor.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Mesh">
            <summary>
            The index of the mesh reference that this node points to.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Translation">
            <summary>
            The position of this object expressed as a 3D point <c>x, y, z</c>
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Rotation">
            <summary>
            The rotation of this object expressed as a Quaternion: <c>x, y, z, w</c>
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Scale">
            <summary>
            The scale of this object expressed as a 3D point <c>x, y, z</c>
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Matrix">
            <summary>
            A transformation matrix representing the position, size, and scale of this <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.SetPosition(ThreeRingsSharp.XansData.Structs.Vector3)">
            <summary>
            Sets <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Translation"/> to the given <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/>.
            </summary>
            <param name="translation">The <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> to set <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Translation"/> to.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.SetRotation(com.threerings.math.Quaternion)">
            <summary>
            Sets <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Rotation"/> to the given <see cref="T:com.threerings.math.Quaternion"/>.
            </summary>
            <param name="rotation">The <see cref="T:com.threerings.math.Quaternion"/> to set <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Rotation"/> to.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.SetScale(ThreeRingsSharp.XansData.Structs.Vector3)">
            <summary>
            Sets <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Scale"/> to the given <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/>.
            </summary>
            <param name="scale">The <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> to set <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Scale"/> to.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.SetScale(System.Single)">
            <summary>
            Sets <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Scale"/> so that all three components are equal to the given <see cref="T:System.Single"/>.
            </summary>
            <param name="scale">The <see cref="T:System.Single"/> to set all components of <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.Scale"/> to.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFNode.SetTransform(com.threerings.math.Transform3D)">
            <summary>
            Sets all applicable transformation-related properties from the given <see cref="T:com.threerings.math.Transform3D"/>.<para/>
            This also applies the up axis from <see cref="P:ThreeRingsSharp.XansData.Model3D.TargetUpAxis"/>.
            </summary>
            <param name="transform"></param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPBRBaseColor">
            <summary>
            Represents the baseColorTexture node in the pbrMetallicRoughness node of materials.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPBRBaseColor.Index">
            <summary>
            The texture index
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPBRBaseColor.TexCoord">
            <summary>
            The UV index
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPBRMetallicRoughness">
            <summary>
            The PBR Metallic Roughness material attribute.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPBRMetallicRoughness.BaseColorFactor">
            <summary>
            The modifier to the base color of the material. Default is white (so no changes)
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPBRMetallicRoughness.BaseColorTexture">
            <summary>
            The base texture.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPBRMetallicRoughness.MetallicFactor">
            <summary>
            How metallic the material is. Default is 0%.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPBRMetallicRoughness.RoughnessFactor">
            <summary>
            How rough the material is (how un-shiny). Default is 100%.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPrimitive">
            <summary>
            Represents a single piece of geometry.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPrimitive.Attributes">
            <summary>
            Information about this geometry.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPrimitive.Indices">
            <summary>
            The indices used to determine triangles in this geometry.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPrimitive.Material">
            <summary>
            The material index of this primitive.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPrimitiveAttribute">
            <summary>
            Represents information about a model, namely, what <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor"/> ids contain the applicable data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPrimitiveAttribute.Position">
            <summary>
            The id of the <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor"/> containing the vertices for this primitive.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPrimitiveAttribute.Normal">
            <summary>
            The id of the <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor"/> containing the normals for this primitive.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFPrimitiveAttribute.TexCoord0">
            <summary>
            The id of the <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor"/> containing the UVs for this primitive.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFSampler">
            <summary>
            Represents an image sampler, which determines how an image is applied as a texture.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFScene">
            <summary>
            Represents an entire secene.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFScene.Name">
            <summary>
            The name of this <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFScene"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFScene.Nodes">
            <summary>
            The IDs of the nodes included in this <see cref="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFScene"/>.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFTexture">
            <summary>
            Represents a texture.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFTexture.Sampler">
            <summary>
            The index of the sampler that determines how to apply this texture.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFTexture.Source">
            <summary>
            The index of the image that contains the actual picture to apply.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.ModelExporterFactory`1">
            <summary>
            A class that can construct <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/>s. This is used internally for ease of access in <see cref="T:ThreeRingsSharp.XansData.Model3D"/>, and should not be used on its own.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.ModelExporterFactory`1.NewInstance">
            <summary>
            Create a new instance of the given <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/>.
            </summary>
            <returns></returns>
            <exception cref="T:ThreeRingsSharp.XansData.Exceptions.InvalidTypeException">If the user tries to create a <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/> itself.</exception>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.OBJExporter">
            <summary>
            Exports model data in the Wavefront OBJ format.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.OBJExporter.WriteVertex(System.Text.StringBuilder,ThreeRingsSharp.XansData.Structs.Vector3)">
            <summary>
            Writes a vertex to the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="objBuilder">A reference to the <see cref="T:System.Text.StringBuilder"/> which is being used to construct the OBJ file.</param>
            <param name="vertex">The <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> to write as a vertex.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.OBJExporter.WriteNormal(System.Text.StringBuilder,ThreeRingsSharp.XansData.Structs.Vector3)">
            <summary>
            Writes a vertex normal to the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="objBuilder">A reference to the <see cref="T:System.Text.StringBuilder"/> which is being used to construct the OBJ file.</param>
            <param name="normal">The <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> to write as a normal.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.OBJExporter.WriteUVCoordinate(System.Text.StringBuilder,ThreeRingsSharp.XansData.Structs.Vector2)">
            <summary>
            Writes a UV Coordinate to the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="objBuilder">A reference to the <see cref="T:System.Text.StringBuilder"/> which is being used to construct the OBJ file.</param>
            <param name="uv">The <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> to write as a UV Coordinate</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.OBJExporter.WriteIndexTriplet(System.Text.StringBuilder,System.Collections.Generic.List{System.Int16},System.Int32,System.Int32)">
            <summary>
            Writes the given indices to the given <see cref="T:System.Text.StringBuilder"/>. This adds 1 to all of the indices so that they are compliant with OBJ standards.
            </summary>
            <param name="objBuilder">A reference to the <see cref="T:System.Text.StringBuilder"/> which is being used to construct the OBJ file.</param>
            <param name="indices">The list of indices for this 3D model.</param>
            <param name="tripletStartIndex">An index multiplied by 3 to represent where to get a triplet from (so an index of 0 would be indices[0], [1], and [2], and an index of 1 would be [3], [4], and [5])</param>
            <param name="indexOffset">The value to offset geometry indices by.</param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.MeshData">
            <summary>
            Represents mesh data. This is referenced by <see cref="T:ThreeRingsSharp.XansData.Model3D"/>s to determine their mesh data.<para/>
            In order to prevent formats that support unqiue objects from exporting the same mesh more than once, this class is used.<para/>
            This allows multiple objects to represent the same mesh data rather than recreating it for every individual instance of the model.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.MeshDataBindings">
            <summary>
            A binding from a <see cref="T:System.String"/> identifier to a <see cref="T:ThreeRingsSharp.XansData.MeshData"/>. This can be used to find existing mesh data for a model.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.NonUniqueMeshDataInstances">
            <summary>
            A list of every <see cref="T:ThreeRingsSharp.XansData.MeshData"/> that has been instantiated. Unlike <see cref="P:ThreeRingsSharp.XansData.MeshData.MeshDataBindings"/>, should any meshes have the same name (which will not happen under normal circumstances), this will store all instances.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.MeshData.Users">
            <summary>
            A list of <see cref="T:ThreeRingsSharp.XansData.Model3D"/> instances that reference this mesh.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.Name">
            <summary>
            They key in <see cref="P:ThreeRingsSharp.XansData.MeshData.MeshDataBindings"/> that corresponds to this <see cref="T:ThreeRingsSharp.XansData.MeshData"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.Vertices">
            <summary>
            The vertices that make up this 3D model. Generally speaking, this should be used if the model is not rigged.<para/>
            Consider using <see cref="P:ThreeRingsSharp.XansData.MeshData.VertexGroups"/> to access the geometry of rigged models, do mind some vertices may be duplicated.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.Normals">
            <summary>
            The normals that make up this 3D model.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.UVs">
            <summary>
            The UV coordinates.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.Indices">
            <summary>
            The indices that define triangles.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.VertexGroups">
            <summary>
            All of the vertex groups in this model, represented as a list of indices. These indices reference <see cref="P:ThreeRingsSharp.XansData.MeshData.Vertices"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.BoneNames">
            <summary>
            A list of every bone name in this model. Unlike the list provided in Clyde geometry, the first element (index 0) of this list is null.<para/>
            This allows easier bone indexing when observing vertex groups since all that needs to be done is testing if the name is null (0 denotes "not in a bone group")
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.BoneIndices">
            <summary>
            The indices for bones. These correspond to an entry in the modified <see cref="P:ThreeRingsSharp.XansData.MeshData.BoneNames"/> list.<para/>
            If you need to find the bone for a given vertex, search <see cref="P:ThreeRingsSharp.XansData.MeshData.VertexGroups"/> instead, as <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/>s contain bindings to bones.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.BoneWeights">
            <summary>
            The weights for bones.<para/>
            If you need to find the weight of a vertex for a given bone, search <see cref="P:ThreeRingsSharp.XansData.MeshData.VertexGroups"/> instead.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.HasBoneData">
            <summary>
            This should be <see langword="true"/> if this has bone data. If it is false, <see cref="M:ThreeRingsSharp.XansData.MeshData.ConstructGroups"/> will not do anything.<para/>
            Ensure this is only set to <see langword="true"/> if <see cref="P:ThreeRingsSharp.XansData.MeshData.BoneNames"/>, <see cref="P:ThreeRingsSharp.XansData.MeshData.BoneIndices"/>, and <see cref="P:ThreeRingsSharp.XansData.MeshData.BoneWeights"/> are all populated properly.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.HasTransformed">
            <summary>
            If true, <see cref="M:ThreeRingsSharp.XansData.MeshData.ApplyTransform(com.threerings.math.Transform3D)"/> has already been called.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.MeshData.HasAxialTransformed">
            <summary>
            If true, <see cref="M:ThreeRingsSharp.XansData.MeshData.ApplyAxialTransformationMod"/> has already been called. Axial transformations change the up axis based on <see cref="P:ThreeRingsSharp.XansData.Model3D.TargetUpAxis"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.MeshData.#ctor">
            <summary>
            Creates a new <see cref="T:ThreeRingsSharp.XansData.MeshData"/>.<para/>
            WARNING: This <see cref="T:ThreeRingsSharp.XansData.MeshData"/> will NOT be added to <see cref="P:ThreeRingsSharp.XansData.MeshData.MeshDataBindings"/>!
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.MeshData.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:ThreeRingsSharp.XansData.MeshData"/> and assigns <see cref="P:ThreeRingsSharp.XansData.MeshData.MeshDataBindings"/>[<paramref name="name"/>] to the new instance.
            </summary>
            <param name="name">The name to assign.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/> is null.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.MeshData.GetVertexGroupByName(System.String)">
            <summary>
            Iterates through <see cref="P:ThreeRingsSharp.XansData.MeshData.VertexGroups"/> and returns the first <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/> whose <see cref="P:ThreeRingsSharp.XansData.Structs.VertexGroup.Name"/> is equal to <paramref name="name"/>, or <see langword="null"/> if one could not be found.
            </summary>
            <param name="name">The name to search for.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">If this <see cref="T:ThreeRingsSharp.XansData.MeshData"/> has been disposed.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.MeshData.ConstructGroups">
            <summary>
            Constructs all <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/> instances automatically.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If this <see cref="T:ThreeRingsSharp.XansData.MeshData"/> has been disposed.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.MeshData.ApplyTransform(com.threerings.math.Transform3D)">
            <summary>
            Performs the actual application of a <see cref="T:com.threerings.math.Transform3D"/> on this model's data, and also calls <see cref="M:ThreeRingsSharp.XansData.MeshData.ApplyAxialTransformationMod"/>.<para/>
            This will do nothing if <see cref="P:ThreeRingsSharp.XansData.MeshData.HasTransformed"/> is <see langword="true"/>.
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.MeshData.ApplyAxialTransformationMod">
            <summary>
            Rearranges all of the data in this <see cref="T:ThreeRingsSharp.XansData.MeshData"/> based on <see cref="P:ThreeRingsSharp.XansData.Model3D.TargetUpAxis"/>.<para/>
            This will do nothing if <see cref="P:ThreeRingsSharp.XansData.MeshData.HasAxialTransformed"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.MeshData.Clone">
            <summary>
            Clones this <see cref="T:ThreeRingsSharp.XansData.MeshData"/>.<para/>
            This automatically registers the cloned mesh in <see cref="P:ThreeRingsSharp.XansData.MeshData.MeshDataBindings"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If this <see cref="T:ThreeRingsSharp.XansData.MeshData"/> has been disposed.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.MeshData.DisposeIfNoUsersExist">
            <summary>
            Calls <see cref="M:ThreeRingsSharp.XansData.MeshData.Dispose"/> if <see cref="F:ThreeRingsSharp.XansData.MeshData.Users"/> is empty.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.ModelFormat">
            <summary>
            Represents a format type for 3D models.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.ModelFormat.OBJ">
            <summary>
            Format: WaveFront OBJ Format
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.ModelFormat.GLTF">
            <summary>
            Format: Graphics Library Transmission Format
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.ModelFormatUtil.ExtensionToFormatBindings">
            <summary>
            A binding from <see cref="T:System.String"/> file extensions to <see cref="T:ThreeRingsSharp.XansData.ModelFormat"/>s, e.g. the string <c>".glb"</c> corresponds to <see cref="F:ThreeRingsSharp.XansData.ModelFormat.GLTF"/>.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.ModelGroup">
            <summary>
            Represents a group of models. May represent a scene.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.ModelGroup.Models">
            <summary>
            The models stored within this group.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.ModelGroup.IsScene">
            <summary>
            If <see langword="true"/>, this <see cref="T:ThreeRingsSharp.XansData.ModelGroup"/> should be handled as a scene. This is mainly used for glTF exporting.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Singleton`1">
            <summary>
            When extended, a property named <c>Instance</c> is statically provided for the given type that references an instance of said type.
            </summary>
            <typeparam name="T">The type of the singleton instance.</typeparam>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Singleton`1.Instance">
            <summary>
            A reference to the singleton instance of this class.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Structs.Axis">
            <summary>
            An enum representing an axis.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Structs.Vector2">
            <summary>
            Stores three <see langword="float"/> values that represent a coordinate in 3D space.<para/>
            Unlike <see cref="T:System.Numerics.Vector2"/>, this does not contain any vector math methods. This is strictly for data storage.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector2.X">
            <summary>
            The X component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> which generally represents left or right positions relative to the world.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector2.Y">
            <summary>
            The Y component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> which generally represents upward or downward positions relative to the world.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Construct a new Vector3 with the given X, Y, and Z coordinates.
            </summary>
            <param name="x">The X component of this Vector3.</param>
            <param name="y">The Y component of this Vector3.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector2.FromFloatArray(System.Single[])">
            <summary>
            Returns a list of <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/>s composed of the given float array, taking each value out in pairs.<para/>
            Throws <see cref="T:System.DataMisalignedException"/> if the float array's length is not divisible by two.
            </summary>
            <param name="values">The float array to be translated into a <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> array.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector2.ToString">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> into a string where each component is separated by a single space: <c>X Y</c>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Structs.Vector3">
            <summary>
            Stores three <see langword="float"/> values that represent a coordinate in 3D space.<para/>
            Unlike <see cref="T:System.Numerics.Vector3"/>, this does not contain any vector math methods. This is strictly for data storage.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector3.X">
            <summary>
            The X component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> which generally represents left or right positions relative to the world.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector3.Y">
            <summary>
            The Y component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> which generally represents upward or downward positions relative to the world.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector3.Z">
            <summary>
            The Z component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> which generally represents forward or backward positions relative to the world.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> with the given X, Y, and Z coordinates.
            </summary>
            <param name="x">The X component of this Vector3.</param>
            <param name="y">The Y component of this Vector3.</param>
            <param name="z">The Z component of this Vector3.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector3.FromFloatArray(System.Single[])">
            <summary>
            Returns a list of <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/>s composed of the given float array, taking each value out in triplets.<para/>
            Throws <see cref="T:System.DataMisalignedException"/> if the float array's length is not divisible by three.
            </summary>
            <param name="values">The float array to be translated into a <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> array.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector3.FromAxis(ThreeRingsSharp.XansData.Structs.Axis)">
            <summary>
            Returns a unit vector in the direction of the given <see cref="T:ThreeRingsSharp.XansData.Structs.Axis"/>.
            </summary>
            <param name="axis">The axis to construct a unit vector from.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector3.RotateToAxis(ThreeRingsSharp.XansData.Structs.Axis)">
            <summary>
            Returns a copy of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> rotated so that, assuming its current state is Y=Up, its up axis is changed to the given <paramref name="newAxis"/>.
            </summary>
            <param name="newAxis"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector3.ToString">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> into a string where each component is separated by a single space: <c>X Y Z</c>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Structs.Vertex">
            <summary>
            Represents a vertex, which is effectively identical to a <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> with a Weight value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vertex.Point">
            <summary>
            The location of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> in 3D space.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vertex.Weight">
            <summary>
            The weight of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> in the context of bone groups.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vertex.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> with the given X, Y, and Z coordinates and weight.
            </summary>
            <param name="x">The X component of this Vector3.</param>
            <param name="y">The Y component of this Vector3.</param>
            <param name="z">The Z component of this Vector3.</param>
            <param name="weight">The weight of this vertex in the context of any associated bone data.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vertex.#ctor(ThreeRingsSharp.XansData.Structs.Vector3,System.Single)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> from the given point and weight.
            </summary>
            <param name="point">The location of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> in 3D space.</param>
            <param name="weight">The weight of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> in the context of any associated bone data.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vertex.FromFloatArray(System.Single[],System.Single)">
            <summary>
            Returns a list of <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/>s composed of the given float array, taking each value out in triplets. The weight of each <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> will be set to <paramref name="defaultWeight"/>.<para/>
            Throws <see cref="T:System.DataMisalignedException"/> if the float array's length is not divisible by three.
            </summary>
            <param name="values">The float array to be translated into a <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> array.</param>
            <param name="defaultWeight">The weight to give to each vertex, which is used in the context of bone information.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vertex.FromFloatArray(System.Single[],System.Single[])">
            <summary>
            Returns a list of <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/>s composed of the given float array, taking each value out in triplets.<para/>
            Throws <see cref="T:System.DataMisalignedException"/> if the float array's length is not divisible by three, or if the length of the weight array isn't the same as the result <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> array.
            </summary>
            <param name="values">The float array to be translated into a <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> array.</param>
            <param name="weights">A list of the weights to give the resulting <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> instances.</param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Structs.VertexGroup">
            <summary>
            Represents a vertex group, which is used for rigged models. All stored vertices simply represent a vertex that has a weight in a given bone group. As such, if a vertex has a weight value less than 1, it will be a duplicate of at least one other vertex in one other vertex group.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Structs.VertexGroup.Vertices">
            <summary>
            All of the vertices stored in this VertexGroup. These ARE unique objects (not unique positions in space) since this is a representation of bone data. If you need to access the full geometry (and not every vertex used by a given bone), do it through <see cref="P:ThreeRingsSharp.XansData.MeshData.Vertices"/>, since these vertices are not affected by transforms which may drastically malform the output.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Structs.VertexGroup.Indices">
            <summary>
            The indices in this vertex group. These refer to the triangles in this <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/>, but are the indices used by the whole model otherwise.<para/>
            Please note that certain indices in this array may be duplicated (or, the same exact index will appear up to 4 times in a row). If this is the case, ignore subsequent instances of the same number. For instance, this array may contain <c>1 2 2 2 3 3 4</c>, and should turn into <c>1 2 3 4</c> after you trim it yourself.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Structs.VertexGroup.Name">
            <summary>
            The name of this vertex group, which should be identical to the node it corresponds to.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.VertexGroup.#ctor">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/> with default properties.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.VertexGroup.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/> with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.VertexGroup.Clone">
            <summary>
            Clones this <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/> into a new instance. All data in the new instance is separate from the old instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Model3D">
            <summary>
            A unified representation of a model. Since various implementations from Clyde may store data differently, this provides a common interface.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.ExporterBindings">
            <summary>
            A list of bindings from <see cref="T:ThreeRingsSharp.XansData.ModelFormat"/>s to a singleton of their applicable <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.TargetUpAxis">
            <summary>
            The axis that represents the vertical component. This should be set depending on the program the model will be imported to.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.MultiplyScaleByHundred">
            <summary>
            Multiplies the scale of exported models by 100. This is really handy for a lot of models but may cause others to be huge.<para/>
            This is <see langword="true"/> by default since it's used more than it isn't.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.ProtectAgainstZeroScale">
            <summary>
            If <see langword="true"/>, any models that have a scale of zero will have their scale corrected. Cases where models are dubbed incorrect are:<para/>
            - The matrix's scale (a <see cref="T:com.threerings.math.Vector3f"/>) only has its X value populated, Y and Z are zero. Y and Z will be set to X (this happens for cases where uniform scale is stored as a Vector3f)<para/>
            - The matrix's scale has a magnitude of zero.<para/>
            - The <see cref="M:com.threerings.math.Transform3D.getScale"/> method returns zero, in which case, if the matrix has a non-zero uniform scale it will be set to this, or it will be directly set to 1.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.Name">
            <summary>
            The display name for this model, used in exporting (i.e. this is the name that will show up in Blender or any other modelling software.)
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.Source">
            <summary>
            A reference to the file that the model here came from. This is used to reference textures and other path-dependent extra data.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.Transform">
            <summary>
            The transformation to apply to the model data. By default, this is the identity transformation (so no transform).
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.Mesh">
            <summary>
            A reference to the geometry stored in this <see cref="T:ThreeRingsSharp.XansData.Model3D"/>, since multiple models may share the same mesh data.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.HasDoneTransformation">
            <summary>
            If true, then <see cref="P:ThreeRingsSharp.XansData.Model3D.Transform"/> has been applied to the mesh data, and <see cref="M:ThreeRingsSharp.XansData.Model3D.ApplyTransformations"/> cannot be called again.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.HasAppliedScaleCorrections">
            <summary>
            If true, <see cref="M:ThreeRingsSharp.XansData.Model3D.ApplyScaling"/> has already been called and cannot be called again. This applies transformations like the zero-scale check and the x100 scale prefs.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.Textures">
            <summary>
            The textures tied to this model relative to the rsrc directory.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.ActiveTexture">
            <summary>
            The texture that this model uses. This is by filename, not full path.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.Attachments">
            <summary>
            The attached models on this <see cref="T:ThreeRingsSharp.XansData.Model3D"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.ExtraData">
            <summary>
            Any extra information attached to this <see cref="T:ThreeRingsSharp.XansData.Model3D"/> that should be attached as arbitrary data.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.Export(System.IO.FileInfo,ThreeRingsSharp.XansData.ModelFormat)">
            <summary>
            Exports this model in a given format, writing the data to the target <see cref="T:System.IO.FileInfo"/>
            </summary>
            <param name="targetFile">The file that will be written to.</param>
            <param name="targetFormat">The file format to use for the 3D model.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.ApplyTransformations">
            <summary>
            This should only be used in contexts where the exported model format does not have abstractions between objects and mesh data (e.g. formats like OBJ)!<para/>
            This duplicates <see cref="P:ThreeRingsSharp.XansData.Model3D.Mesh"/> into a new instance made just for this <see cref="T:ThreeRingsSharp.XansData.Model3D"/> and then applies <see cref="P:ThreeRingsSharp.XansData.Model3D.Transform"/> to its contents.<para/>
            This can only be called once (subsequent calls will do nothing.)
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.ApplyScaling">
            <summary>
            Applies the scale modifiers to this <see cref="P:ThreeRingsSharp.XansData.Model3D.Transform"/> as defined by user prefs. This can only be called once (subsequent calls will do nothing.)
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.Dispose">
            <summary>
            Frees all information used by this <see cref="T:ThreeRingsSharp.XansData.Model3D"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.ExportIntoOne(System.IO.FileInfo,ThreeRingsSharp.XansData.ModelFormat,ThreeRingsSharp.XansData.Model3D[])">
            <summary>
            Exports the given <see cref="T:ThreeRingsSharp.XansData.Model3D"/> instances into a single file.
            </summary>
            <param name="targetFile"></param>
            <param name="targetFormat"></param>
            <param name="models"></param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper">
            <summary>
            Loads all of the XML config reference files and stores their data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.MERGED_FILE_VERSION">
            <summary>
            The current version of the MergedConfigReferences file.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.ConfigReferences">
            <summary>
            A read-only map from a given type name (e.g. "tile", "placeable", or "material") to an object representing its implementation in the Clyde format itself.<para/>
            Configs should be referenced like an array: <c>ConfigReferences["tile"]</c><para/>
            It can be indexed via a string name, which is the name of the file without .dat or .xml<para/>
            It can also be indexed via type, such as via <c>ConfigReferences[<see langword="typeof"/>(<see cref="T:com.threerings.opengl.material.config.MaterialConfig"/>)]</c>
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.PopulateConfigRefs">
            <summary>
            Initializes all config references together.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.GetConfigReferenceFromName(System.String)">
            <summary>
            Accesses <c>MergedConfigReferences.bin</c> and pulls the data from the specific named entry, or null if the merged binary file doesn't exist, is out of date, or the object couldn't be found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.GetConfigReferenceFromType(System.Type)">
            <summary>
            Accesses <c>MergedConfigReferences.bin</c> and pulls the data from the specific typed entry, or null if the merged binary file doesn't exist, is out of date, or the object couldn't be found.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.GetConfigReferenceNames">
            <summary>
            Returns all of the legal names for config references, or null if the merged binary file doesn't exist or is out of date.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.ReadFromRawConfigRefs">
            <summary>
            If the merged binary stuff doesn't exist, then this will try to find a ConfigRefs folder.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.PruneXMLAndMakeBinaries">
            <summary>
            Populates a list of XML Configs from the existing default config refs that don't include entries referencing classes that don't exist (e.g. SK-specific stuff).<para/>
            This then translates them to binary files so that loading is considerably faster.<para/>
            Returns whether or not to skip populating the config refs dictionary (<see langword="true"/> if it should be skipped).
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.HasLegalClasses(System.Xml.Linq.XElement)">
            <summary>
            Returns <see langword="true"/> if this <see cref="T:System.Xml.Linq.XElement"/> only has class references that can be resolved.<para/>
            Returns <see langword="false"/> if this <see cref="T:System.Xml.Linq.XElement"/> contains class references that cannot be resolved.
            </summary>
            <param name="rootEntry"></param>
            <returns></returns>
        </member>
        <member name="F:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.OOOLib">
            <summary>
            A reference to the OOOLibAndDeps.dll assembly.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceBootstrapper.DoesClassExistCache">
            <summary>
            A cache representing whether or not certain classes exist.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceContainer">
            <summary>
            A container for config references. This behaves like a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceContainer.References">
            <summary>
            All of the existing references.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceContainer.ReferencesByType">
            <summary>
            All of the existing references, but indexed by their type.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceContainer.ReferencesByEntryName">
            <summary>
            A cache from the literal config entry name to the corresponding object. The returned value could be any reference type.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceContainer.ValidNames">
            <summary>
            An array of all of the names that are valid config containers.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceContainer.Item(System.String)">
            <summary>
            Get the configuration data for the given name, which should be identical to the config dat file name without its extension (e.g. "tile").<para/>
            Throws an <see cref="T:System.ArgumentException"/> if the given name isn't valid, and an <see cref="T:System.ArgumentNullException"/> if the given name is <see langword="null"/>.
            </summary>
            <param name="cfgName">The name of the configuration, identical to its dat name without the extension (e.g. "tile")</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">If the name isn't correct.</exception>
            <exception cref="T:System.ArgumentNullException">If the name is null.</exception>
        </member>
        <member name="P:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceContainer.Item(System.Type)">
            <summary>
            Given a <see cref="T:System.Type"/> representing a specific config (e.g. <see cref="T:com.threerings.opengl.material.config.MaterialConfig"/>), the container for this config and all of its instances will be returned.
            </summary>
            <param name="cfgType"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.ConfigReferences.ConfigReferenceContainer.TryGetReferenceFromName(System.String)">
            <summary>
            When given the name of a specific entry, this will iterate through ALL configs and try to find it.<para/>
            Warning: This will be slow in general. It will cache what results it gets however.<para/>
            Returns <see langword="null"/> if the reference could not be found.
            </summary>
            <param name="targetName"></param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.XML.ConfigReferences.Tile">
            <summary>
            Handles iterating through tile elements.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.ConfigReferences.Tile.IterateTiles(System.Xml.XmlReader)">
            <summary>
            Go through all of the tile data and get its entries.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.XMLExtension.ElementsNamed(System.Xml.XmlReader,System.String)">
            <summary>
            Iterates through all of the XML elements with the given <paramref name="elementName"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to grab data from.</param>
            <param name="elementName">The name of the elements that should be returned.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.XML.XMLExtension.ElementsNamed(System.Xml.XmlReader,System.String,System.Int32[])">
            <summary>
            Iterates through all of the XML elements with the given <paramref name="elementName"/> at the given <paramref name="depths"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> to grab data from.</param>
            <param name="elementName">The name of the elements that should be returned.</param>
            <param name="depths">The depth to locate the element at.</param>
            <returns></returns>
        </member>
    </members>
</doc>
