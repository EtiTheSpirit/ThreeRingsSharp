<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThreeRingsSharp</name>
    </assembly>
    <members>
        <member name="T:ThreeRingsSharp.DataHandlers.ClydeFileHandler">
            <summary>
            A class designed to handle files exported by the Clyde library.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.ClydeFileHandler.UpdateGUIAction">
            <summary>
            A delegate action that is called when the GUI needs to update. This can safely be <see langword="null"/> for contexts that do not have a GUI, as it is used for the SK Animator Tools UI.<para/>
            Pass in <see langword="null"/> for arguments to make their data remain unchanged.<para/>
            This is designed to work with the UI offered by SK Animator Tools V2. The parameters are as follows:<para/>
            <c>string fileName (the name of the file that was opened)<para/>
            string isCompressed (a string of true/false, yes/no, etc.)<para/>
            string formatVersion (represents clyde file version. Classic, Intermediate, or VarInt for example)<para/>
            string type (the base class, e.g. ModelConfig, AnimationConfig, ScriptedConfig)</c>
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.ClydeFileHandler.MultiplyScaleByHundred">
            <summary>
            Multiplies the scale of exported models by 100. This is really handy for a lot of models but may cause others to be huge.<para/>
            This is <see langword="true"/> by default since it's used more than it isn't.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.ClydeFileHandler.HandleClydeFile(System.IO.FileInfo,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},System.Boolean,System.Object,System.Boolean,com.threerings.math.Transform3D)">
            <summary>
            Takes in a <see cref="T:System.IO.FileInfo"/> representing a file that was created with the Clyde library.<para/>
            This will throw a <see cref="T:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException"/> if anything goes wrong during reading.
            </summary>
            <param name="clydeFile">The file to load and decode.</param>
            <param name="allGrabbedModels">A list containing every processed model from the entire hierarchy. This list should be defined by you and then passed in.</param>
            <param name="isBaseFile">If <see langword="true"/>, this will update the main GUI display data for the base loaded model. If the GUI is not defined (e.g. this is being used in a library) this will do nothing.</param>
            <param name="lastNodeParent">Intended for use if <paramref name="isBaseFile"/> is <see langword="false"/>, this is the parent Data Tree element to add this model into (so that the hierarchy can be constructed). This should be a <see cref="T:System.Windows.Forms.TreeNode"/>, a <see cref="T:System.Windows.Forms.TreeView"/>, or a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>.</param>
            <param name="useFileName">If <see langword="true"/>, the name of the loaded file will be displayed in the tree hierarchy's root node, e.g. model.dat</param>
            <param name="transform">Intended to be used by reference loaders, this specifies an offset for referenced models. All models loaded by this method in the given chain / hierarchy will have this transform applied to them. If it doesn't exist, it will be created.</param>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.ModelConfigBrancher">
            <summary>
            A class that takes in a <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>, determines its subtype (e.g. <see cref="T:com.threerings.opengl.model.config.ArticulatedConfig"/>, <see cref="T:com.threerings.opengl.model.config.StaticConfig"/>, etc.), and handles the data appropriately.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.ModelConfigBrancher.HandleDataFrom(System.IO.FileInfo,com.threerings.opengl.model.config.ModelConfig,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Boolean,com.threerings.math.Transform3D)">
            <summary>
            Sends an arbitrary <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> into the data brancher and processes it.
            </summary>
            <param name="sourceFile">The file that the given <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> came from.</param>
            <param name="model">The <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> itself.</param>
            <param name="models">A list containing every processed model from the entire hierarchy.</param>
            <param name="currentDataTreeObject">The current element in the data tree hierarchy to use.</param>
            <param name="useImplementation">If <see langword="false"/>, the name of the implementation will be displayed instead of the file name. Additionally, it will not have its implementation property.</param>
            <param name="transform">Intended to be used by reference loaders, this specifies an offset for referenced models. All models loaded by this method in the given chain / hierarchy will have this transform applied to them. If the value passed in is <see langword="null"/>, it will be substituted with a new <see cref="T:com.threerings.math.Transform3D"/>.</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.ArticulatedConfigHandlers.ArticulatedConfigHandler.RecursivelyIterateNodes(System.IO.FileInfo,com.threerings.opengl.model.config.ArticulatedConfig.Node,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},com.threerings.math.Transform3D)">
            <summary>
            A utility function that iterates through all of the nodes recursively, as some may store mesh data.
            </summary>
            <param name="sourceFile">The file where the <see cref="T:com.threerings.opengl.model.config.ArticulatedConfig"/> is stored.</param>
            <param name="parent">The parent node to iterate through.</param>
            <param name="models">The <see cref="T:System.Collections.Generic.List`1"/> of all models ripped from the source .dat file in this current chain (which may include references to other .dat files)</param>
            <param name="latestTransform">The latest transform that has been applied. This is used for recursive motion since nodes inherit the transform of their parent.</param>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator">
            <summary>
            A specialized class designed to handle <see cref="T:com.threerings.opengl.geometry.config.GeometryConfig"/> types and pull the necessary information out, placing it into a <see cref="T:ThreeRingsSharp.XansData.Model3D"/>
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.GetGeometryInformation(com.threerings.opengl.geometry.config.GeometryConfig)">
            <summary>
            Translates the given <see cref="T:com.threerings.opengl.geometry.config.GeometryConfig"/> into a <see cref="T:ThreeRingsSharp.XansData.Model3D"/>.
            </summary>
            <param name="geometry">The <see cref="T:com.threerings.opengl.geometry.config.GeometryConfig"/> storing the applicable data.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.GetFromShortBuffer(java.nio.ShortBuffer)">
            <summary>
            Since the given buffer may not have an array, this will automatically perform necessary edits to get a <see cref="T:System.Int16"/> array.
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.GetArrayByName(com.threerings.opengl.geometry.config.GeometryConfig.AttributeArrayConfig[],System.String)">
            <summary>
            Attempts to locate a <see cref="T:com.threerings.opengl.geometry.config.GeometryConfig.AttributeArrayConfig"/> that has the given name from <paramref name="vertexAttributeArrays"/>.
            </summary>
            <param name="vertexAttributeArrays">The list of arrays to search.</param>
            <param name="name">The name to locate.</param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.BoneDataContainer">
            <summary>
            A container class for bone indices and weights.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.BoneDataContainer.BoneIndices">
            <summary>
            Bone indices are an array of four <see cref="T:System.Single"/> values. It traverses the chain of bones. An index of 0 means stop traversing (this is because bone 0 is always %ROOT%).
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator.BoneDataContainer.BoneWeights">
            <summary>
            Bone weights are an array of four <see cref="T:System.Single"/> values. These values correspond to a bone index.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.IDataTreeInterface`1">
            <summary>
            Represents a class that can interface with a data tree GUI element to display information about a <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.IDataTreeInterface`1.SetupCosmeticInformation(`0,ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Sets up the cosmetic data for this model, or, what's displayed in the GUI for the program.
            </summary>
            <param name="model">The <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> to pull data from.</param>
            <param name="dataTreeParent">This is the instance in the data tree that represents this object in the hierarchy.</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.ModelConfigHandlers.ModelConfigHandler.SetupCosmeticInformation(com.threerings.opengl.model.config.ModelConfig,ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Boolean)">
            <summary>
            Sets up the cosmetic data for this model, or, what's displayed in the GUI for the program.<para/>
            This specific method populates data that is common across all imported models.
            </summary>
            <param name="model">The model containing other data, such as the <see cref="T:com.threerings.opengl.model.config.ModelConfig.Implementation"/>.</param>
            <param name="dataTreeParent">This is the instance in the data tree that represents this object in the hierarchy. If null, this method call is skipped.</param>
            <param name="dataTreeNameIsImplementation">If <see langword="true"/>, the name of <paramref name="dataTreeParent"/> is the implementation of the model, so the implementation property will not be added.</param>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.IModelDataHandler">
            <summary>
            Represents a class designed to handle the data within a <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.IModelDataHandler.HandleModelConfig(System.IO.FileInfo,com.threerings.opengl.model.config.ModelConfig,System.Collections.Generic.List{ThreeRingsSharp.XansData.Model3D},ThreeRingsSharp.Utility.Interface.DataTreeObject,com.threerings.math.Transform3D)">
            <summary>
            Handles the data from the given <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
            <param name="sourceFile">The file that contains this data.</param>
            <param name="baseModel">The <see cref="T:com.threerings.opengl.model.config.ModelConfig"/> storing the data.</param>
            <param name="modelCollection">A reference to a list of models that will be written to.</param>
            <param name="dataTreeParent">An optional parameter for use in GUI Data Trees that will be populated with information about this model. This node will be one in the object hierarchy. Add properties to this to display these properties when it is selected, or add direct children to this.</param>
            <param name="globalTransform">Intended to be used by reference loaders, this specifies an offset for referenced models. All models loaded by this method in the given chain / hierarchy should have this transform applied to them.</param>
        </member>
        <member name="M:ThreeRingsSharp.DataHandlers.Model.StaticConfigHandlers.StaticConfigHandler.SetupCosmeticInformation(com.threerings.opengl.model.config.StaticConfig,ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Sets up the cosmetic data for this model, or, what's displayed in the GUI for the program.
            </summary>
            <param name="model">The <see cref="T:com.threerings.opengl.model.config.StaticConfig"/> to pull data from.</param>
            <param name="dataTreeParent">This is the instance in the data tree that represents this object in the hierarchy.</param>
        </member>
        <member name="P:ThreeRingsSharp.DataHandlers.Model.StaticSetConfigHandler.StaticSetConfigHandler.Instance">
            <summary>
            A reference to the singleton instance of this handler.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.DataHandlers.Model.ViewerAffecterConfigHandlers.ViewerAffecterConfigHandler">
            <summary>
            Handles instance of <see cref="T:com.threerings.opengl.scene.config.ViewerAffecterConfig"/> and their associated <see cref="T:com.threerings.opengl.scene.config.ViewerEffectConfig"/>s.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.Utility.ClassNameStripper">
            <summary>
            A utility dedicated to taking in Java classnames and breaking them down into parts.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ClassNameStripper.GetSplitClassName(java.lang.Class)">
            <summary>
            Returns a <see cref="T:System.String"/> array of the class name. This array always has a very specific structure:<para/>
            [0]=Class Name<para/>
            [1]=Subclass Name<para/>
            If a class does not have a subclass (denoted with a $ in Java classnames), the array will have a Length of 1. Returns <see langword="null"/> if the string does not have a locatable instance of '<c>.</c>'
            </summary>
            <param name="cls">The <see cref="T:java.lang.Class"/> to get the name of.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ClassNameStripper.GetWholeClassName(java.lang.Class)">
            <summary>
            Returns a <see cref="T:System.String"/> that contains everything after the last index of <c>.</c>. This does not filter out subclasses (e.g. <c>MyClass0$MySubclass0</c>) and will return the string containing the $ and everything.<para/>
            Returns <see langword="null"/> if the string does not have a locatable instance of '<c>.</c>'
            </summary>
            <param name="cls">The <see cref="T:java.lang.Class"/> to get the name of.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ClassNameStripper.GetBaseClassName(java.lang.Class)">
            <summary>
            An alias method that calls <see cref="M:ThreeRingsSharp.Utility.ClassNameStripper.GetSplitClassName(System.String)"/> and returns the first index (the base class name), or <see langword="null"/> if '<c>.</c>' could not be found in the <see cref="T:System.String"/>.
            </summary>
            <param name="cls">The <see cref="T:java.lang.Class"/> to get the name of.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ClassNameStripper.GetSplitClassName(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> array of the class name. This array always has a very specific structure:<para/>
            [0]=Class Name<para/>
            [1]=Subclass Name<para/>
            If a class does not have a subclass (denoted with a $ in Java classnames), the array will have a Length of 1. Returns <see langword="null"/> if the string does not have a locatable instance of '<c>.</c>'
            </summary>
            <param name="className">The classname to parse.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ClassNameStripper.GetWholeClassName(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that contains everything after the last index of <c>.</c>. This does not filter out subclasses (e.g. <c>MyClass0$MySubclass0</c>) and will return the string containing the $ and everything.<para/>
            Returns <see langword="null"/> if the string does not have a locatable instance of '<c>.</c>'
            </summary>
            <param name="className">The classname to parse.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ClassNameStripper.GetBaseClassName(System.String)">
            <summary>
            An alias method that calls <see cref="M:ThreeRingsSharp.Utility.ClassNameStripper.GetSplitClassName(System.String)"/> and returns the first index (the base class name), or <see langword="null"/> if '<c>.</c>' could not be found in the <see cref="T:System.String"/>.
            </summary>
            <param name="className">The classname to parse.</param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.AsyncMessageBox">
            <summary>
            Provides a method to asynchronously display a message box. Both methods will do nothing if this class's primary parameter, <see cref="P:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.IsInGUIContext"/>, is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.IsInGUIContext">
            <summary>
            If <see langword="false"/>, <see cref="M:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.ShowAsync(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)"/> will not do anything.<para/>
            This should be set to <see langword="true"/> in contexts where there is a GUI accompanied with the program.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.ShowAsync(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Asynchronously show a message box (show a message box without causing the GUI to stop updating, allowing stuff to work in the background).<para/>
            This also allows the user to interact with the GUI before closing the message box, as a side effect.<para/>
            This task will return <see langword="null"/> if <see cref="P:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.IsInGUIContext"/> is <see langword="false"/>!
            </summary>
            <param name="text">The text to display in the body of the message box.</param>
            <param name="title">The title displayed at the top of the message box.</param>
            <param name="buttons">The buttons used in the message box (e.g. OK)</param>
            <param name="icon">The icon to display on the left side of the message box.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Synchronously show a message box. This is virtually identical to calling <see cref="M:System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)"/>, with the exception that it will return <see langword="null"/> if <see cref="P:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.IsInGUIContext"/> is <see langword="false"/>.<para/>
            Consider using <see cref="M:ThreeRingsSharp.Utility.Interface.AsyncMessageBox.ShowAsync(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)"/> if you wish to allow the program to continue functioning and accept inputs while the dialog is open.
            </summary>
            <param name="text">The text to display in the body of the message box.</param>
            <param name="title">The title displayed at the top of the message box.</param>
            <param name="buttons">The buttons used in the message box (e.g. OK)</param>
            <param name="icon">The icon to display on the left side of the message box.</param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller">
            <summary>
            Handles click events for <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> by storing bindings from a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> to its identical <see cref="T:System.Windows.Forms.TreeNode"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller.ClearAllNodeBindings">
            <summary>
            Erases all node bindings created via <see cref="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller.RegisterTreeNodeBinding(ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Windows.Forms.TreeNode)"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller.RegisterTreeNodeBinding(ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Windows.Forms.TreeNode)">
            <summary>
            Registers a binding from a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> to a <see cref="T:System.Windows.Forms.TreeNode"/>.
            </summary>
            <param name="data"></param>
            <param name="node"></param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller.GetDataObjectOf(System.Windows.Forms.TreeNode)">
            <summary>
            Returns the <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> associated with the given <paramref name="node"/>, or <see langword="null"/> if one does not exist.
            </summary>
            <param name="node">The node used to find the equivalent <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/></param>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.DataTreeObject">
            <summary>
            A class that represents a data tree object. It is a basic container with a parent/child hierarchy as well as other applicable data.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent">
            <summary>
            The <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> that contains this instance, or null if this is a root instance.<para/>
            Setting this will update the children of the applicable objects (remove this from the children of the old parent (if applicable), add this to the children of the new parent (if applicable)) automatically.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.DataTreeObject._Parent">
            <summary>
            The internal reference of the parent. Do not change this internally, and instead change <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/>, as it properly updates the object hierarchy.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.DataTreeObject.Locked">
            <summary>
            If true, the <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/> property of this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> cannot be changed and will always be null.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Children">
            <summary>
            All <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>s that are first-level descendants of this object (this does NOT include nested objects).
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.DataTreeObject._Children">
            <summary>
            An internal reference to the children of this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.ImageKey">
            <summary>
            The image key for this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> which defines the icon displayed to the left of the item in the data tree.<para/>
            The default <see cref="T:ThreeRingsSharp.Utility.Interface.SilkImage"/> is <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generic"/> which represents a generic hierarchy element.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Text">
            <summary>
            The text displayed in the data tree for this object.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.DisplaySingleChildInline">
            <summary>
            Internal compatibility for casts between this and <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/>
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.CreatedFromProperty">
            <summary>
            If true, this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> was cast from a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties">
            <summary>
            The properties of this object. When the associated node is selected, the properties menu will update.<para/>
            The method in which this is displayed is via creating the given <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>s in the Properties menu hierarchy, and then adding a child with no icon containing the associated <see langword="string"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ClearAllChildren">
            <summary>
            Iterates through all children of this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> and sets their <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/> property to <see langword="null"/>.<para/>
            This preserves the hierarchy of the children, so if a child object has its own children, their <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/>s will remain unchanged.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.Dispose">
            <summary>
            Sets the <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/> property of this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> to <see langword="null"/>, locks the <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Parent"/> property, and then calls <see cref="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.Dispose"/> on all children.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.AddChild(ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Adds the given child to this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>'s children.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.RemoveChild(ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Removes the given child from this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>'s children.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ToTreeNode">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> into a <see cref="T:System.Windows.Forms.TreeNode"/>. This does NOT add any children. If you need to keep the hierarchy, use <see cref="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ConvertHierarchyToTreeNodes"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ConvertHierarchyToTreeNodes">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> and all children into an identical hierarchy of <see cref="T:System.Windows.Forms.TreeNode"/> objects, and then returns this object as a <see cref="T:System.Windows.Forms.TreeNode"/> with all of the proper children.<para/>
            This also connects events to being clicked so that they fire the associated events in <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectEventMarshaller"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.CreateHierarchy(ThreeRingsSharp.Utility.Interface.DataTreeObject,System.Windows.Forms.TreeNode)">
            <summary>
            The internal variant of <see cref="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.ConvertHierarchyToTreeNodes"/> that handles the recursion.
            </summary>
            <param name="current"></param>
            <param name="targetParent"></param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.AddSimpleProperty(System.String,System.Object,ThreeRingsSharp.Utility.Interface.SilkImage,ThreeRingsSharp.Utility.Interface.SilkImage,System.Boolean)">
            <summary>
            An alias method used to add a property with a generic icon to <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/> (omitting the need to create a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>)<para/>
            If the objec array is a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/> instance, that instance will be used.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value displayed under the property.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.AddSimpleProperty(System.String,System.Object[],ThreeRingsSharp.Utility.Interface.SilkImage,ThreeRingsSharp.Utility.Interface.SilkImage,System.Boolean)">
            <summary>
            An alias method used to add a property with a generic icon to <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/> (omitting the need to create a <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>)<para/>
            If the object array contains any <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/> instances, those instances will be used (and <paramref name="propertyValueImages"/> will be overridden where applicable).
            </summary>
            <param name="name">The name of the property.</param>
            <param name="values">The values displayed under the property.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.EditSimpleProperty(System.String,System.String,System.Object,System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{System.Boolean})">
            <summary>
            Attempts to locate a property with the given name, and then updates its values. This will do nothing if the property cannot be found.<para/>
            Any <see langword="null"/> parameters will retain their existing values.
            </summary>
            <param name="name">The name to search for.</param>
            <param name="newName">If <see langword="null"/>, the name will remain unchanged. If defined, the name of the property will be changed to this.</param>
            <param name="value">The new value to set the property to.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.EditSimpleProperty(ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty,System.String,System.Object,System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{System.Boolean})">
            <summary>
            Updates the property with the given data.<para/>
            Any <see langword="null"/> parameters will retain their existing values.
            </summary>
            <param name="key">The property to edit.</param>
            <param name="newName">If <see langword="null"/>, the name will remain unchanged. If defined, the name of the property will be changed to this.</param>
            <param name="value">The new value to set the property to.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.EditSimpleProperty(System.String,System.String,System.Object[],System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{System.Boolean})">
            <summary>
            Attempts to locate a property with the given name, and then updates its values. This will do nothing if the property cannot be found.<para/>
            Any <see langword="null"/> parameters will retain their existing values.
            </summary>
            <param name="name">The name to search for.</param>
            <param name="newName">If defined, the name of the property will be changed to this.</param>
            <param name="values">The new values to set the property to.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.EditSimpleProperty(ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty,System.String,System.Object[],System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{ThreeRingsSharp.Utility.Interface.SilkImage},System.Nullable{System.Boolean})">
            <summary>
            Updates the property with the given data. If the property does not exist, it will be added.<para/>
            Any <see langword="null"/> parameters will retain their existing values.
            </summary>
            <param name="key">The property to edit.</param>
            <param name="newName">If defined, the name of the property will be changed to this.</param>
            <param name="values">The new values to set the property to.</param>
            <param name="propertyNameImage">The image displayed next to the property name.</param>
            <param name="propertyValueImages">The image displayed next to each of the values for the property.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).</param>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.FindSimpleProperty(System.String)">
            <summary>
            Locates a given <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty"/> in <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/> whose key is the given <paramref name="name"/>.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObject.#ctor(ThreeRingsSharp.Utility.Interface.DataTreeObject)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/>.
            </summary>
            <param name="parent">The parent <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> to add this object to.</param>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty">
            <summary>
            Represents a simpler variant of <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> storing text and an image. It cannot have children.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.Text">
            <summary>
            The text displayed in the data tree for this object.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.DisplaySingleChildInline">
            <summary>
            If <see langword="true"/>, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>).<para/>
            This object must be a key in a <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/> for this to do anything. When the GUI system creates the properties menu, if this property object has one associated child value, it will display inline if this is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.ImageKey">
            <summary>
            The image key for this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> which defines the icon displayed to the left of the item in the data tree.<para/>
            The default <see cref="T:ThreeRingsSharp.Utility.Interface.SilkImage"/> is <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generic"/> which represents a generic hierarchy element.<para/>
            The "Silk" term comes from the creator of the images, see https://famfamfam.com/
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.ToTreeNode">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.Utility.Interface.DataTreeObject"/> into a <see cref="T:System.Windows.Forms.TreeNode"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.Interface.DataTreeObjectProperty.#ctor(System.String,ThreeRingsSharp.Utility.Interface.SilkImage,System.Boolean)">
            <summary>
            Construct a new property with empty string and the <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Value"/> image.
            </summary>
            <param name="text">The text to display in this property.</param>
            <param name="imageKey">The image to display to the left of the text.</param>
            <param name="displaySinglePropertiesInline">If true, properties with single values will be displayed in the same element containing the property name (<c>Name: Value</c>) instead of as a child element (<c>Name</c>, with a child of <c>Value</c>). In the case of this constructor, this object must be a key in a <see cref="P:ThreeRingsSharp.Utility.Interface.DataTreeObject.Properties"/>. When the GUI system creates the properties menu, if this property object has one associated child value, it will display inline as mentioend prior.</param>
        </member>
        <member name="T:ThreeRingsSharp.Utility.Interface.SilkImage">
            <summary>
            An enum that represents the available icons in the data tree. Certain images are not part of the stock Silk image package.<para/>
            Silk Images come from https://famfamfam.com/ <para/>
            Note to self: Keep this list updated, and ensure its order is identical to the order in which they are defined by the generated code.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generic">
            <summary>
            A blue square representing a generic object. Intended to represent an object of an unknown type.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Object">
            <summary>
            An icon of a data tree with a single parent object containing two children. An alternative to <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generic"/> that serves the same purpose.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Scene">
            <summary>
            A picture of a the globe, intended to represent an entire scene, specifically a <see cref="T:com.threerings.opengl.scene.Scene"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Sky">
            <summary>
            A picture of the sky, intended to represent a skybox object, specifically a <see cref="T:com.threerings.opengl.scene.config.ViewerEffectConfig.Skybox"/>
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Model">
            <summary>
            A wooden box representing an entire model. Intended to represent a model.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.ModelSet">
            <summary>
            A set of three bricks, each with a unique color. Intended to represent a set of several models grouped together.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Articulated">
            <summary>
            An icon of a person. Intended to represent articulated models, which have bones and often animations, specifically a <see cref="T:com.threerings.opengl.model.config.ArticulatedConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Billboard">
            <summary>
            An icon of an application window. Intended to represent a billboard GUI element.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Static">
            <summary>
            A single building brick. Intended to represent a static model (just geometry and nothing else), specifically a <see cref="T:com.threerings.opengl.model.config.StaticConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.MergedStatic">
            <summary>
            A set of three building bricks. Intended to represent a bulk collection of several static models, specifically a <see cref="T:com.threerings.opengl.model.config.MergedStaticConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Sound">
            <summary>
            A picture of a speaker. Intended to represent a sound emitter object.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Attachment">
            <summary>
            A picture of an electric plug. Intended to represent an external object that attaches to another model in its current context, for instance, the Thwacker Gremlin model has an attachment for their hammer. The hammer should use this icon in this context.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Derived">
            <summary>
            A picture of two objects with arrows pointing between them. Intended to represent a derived model class, specifically a <see cref="T:com.threerings.opengl.model.config.ModelConfig.Derived"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Conditional">
            <summary>
            A picture of an arrow that diverges. Intended to represent an element that determines conditional attributes in gameplay, specifically a <see cref="T:com.threerings.opengl.model.config.ConditionalConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.CameraShake">
            <summary>
            A picture of a camera with a small lightning bolt in the lower right corner. Intended to represent an element that causes the user's camera to shake in gameplay.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Generated">
            <summary>
            A picture of a PC with a small plus symbol in the lower right corner. Intended to represent a model that is generated on the fly from a set of parameters.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Schemed">
            <summary>
            A picture of an application window with a small pencil in the lower right corner. Intended to represent a schemed object, specifically a <see cref="T:com.threerings.opengl.model.config.ModelConfig.Schemed"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.SchemedModel">
            <summary>
            A picture of a single building brick with a small pencil in the lower right corner. Intended to represent a schemed model, specifically a <see cref="T:com.threerings.opengl.model.config.ModelConfig.SchemedModel"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Animation">
            <summary>
            A picture of a snippet of film. Intended to represent an animation, specifically a <see cref="T:com.threerings.opengl.model.config.AnimationConfig"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Scripted">
            <summary>
            Intended to represent a scene object that has code running within it, usually for gameplay purposes.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.TimeAction">
            <summary>
            Intended to represent an extension of <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.Scripted"/> that runs on a timer <see cref="T:com.threerings.opengl.model.config.ScriptedConfig.TimeAction"/>
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Config">
            <summary>
            A generic icon of a cog. Used for any extra data that is best described as configuration data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Shading">
            <summary>
            A generic icon of diagonal hashes. Internally this is used to represent fog.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Reference">
            <summary>
            An icon of a hand pointing to a miniature variant of <see cref="F:ThreeRingsSharp.Utility.Interface.SilkImage.ModelSet"/>, intended to represent an external reference to another model.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Array">
            <summary>
            An icon of a piece of paper with a blue &lt;&gt; pattern on it.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Texture">
            <summary>
            An icon of a framed picture intended to represent an image texture.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Variant">
            <summary>
            An icon of a cardboard box intended to represent a variation of a model.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Light">
            <summary>
            A picture of a lightbulb. Intended to represent a source of light.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Value">
            <summary>
            A picture of a hand pointing to a text box containing an arbitrary value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.Triangle">
            <summary>
            A blue triangle, intended to represent more rudimentary components of models (e.g. sub-models in a static model).
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.Utility.Interface.SilkImage.None">
            <summary>
            A transparent space.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.Utility.ResourceDirectoryGrabber">
            <summary>
            A utility class that looks at directory information to try to find the rsrc folder.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.ResourceDirectory">
            <summary>
            A reference to the rsrc directory.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.ResourceDirectoryPath">
            <summary>
            Returns <see cref="P:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.ResourceDirectory"/> as its string path. It will always end in a slash. This enforces the use of forward slashes (/) so that it works with <see cref="T:com.threerings.opengl.model.config.CompoundConfig"/> references.<para/>
            Returns <see langword="null"/> if <see cref="P:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.ResourceDirectory"/> is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.GetFormattedPathFromRsrc(System.IO.FileInfo,System.Boolean)">
            <summary>
            Takes <paramref name="fileIn"/> and climbs up its directory tree until it locates a folder named <c>rsrc</c>. It will then return the path starting from rsrc and ending at this file.<para/>
            The returned path will always use forward slashes.
            </summary>
            <param name="fileIn">The file that is presumably a descendant of the rsrc directory.</param>
            <param name="includeRsrc">If false, the directory path will NOT start with <c>rsrc/</c>.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.ResourceDirectoryGrabber.GetDirectoryDepth(System.IO.FileInfo,System.Int32)">
            <summary>
            Returns a path that uses forward slashes, going <paramref name="depth"/> folders up. A depth of 1 will return the parent directory, a depth of 2 will return the parent of the parent directory, and so on.
            </summary>
            <param name="fileIn"></param>
            <param name="depth"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if depth is less than 1.</exception>
        </member>
        <member name="T:ThreeRingsSharp.Utility.VersionInfoScraper">
            <summary>
            A hacky class that can read the raw binary of a Clyde file and find its implementation.<para/>
            When files are read by <see cref="T:com.threerings.export.BinaryImporter"/>, their implementation is cast into a <see cref="T:java.lang.Class"/>, or is made null if that implementation doesn't exist. This is particularly problematic for Spiral Knights, where player knight models use the unique <c>ProjectXModelConfig</c> that does not exist in this library since Spiral Knights defines it instead. This class allows us to see that it's using this class.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.VersionInfoScraper.HackyGetImplementation(System.IO.FileInfo,System.Boolean)">
            <summary>
            A very hacky method of returning the implementation of this model in its string form so that if Clyde can't read it, we can still see its name. This returns the full class name.<para/>
            This is only functional for extensions of <see cref="T:com.threerings.opengl.model.config.ModelConfig"/>.
            </summary>
            <param name="datFile"></param>
            <param name="isCompressed"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.VersionInfoScraper.IsValidClydeFile(System.IO.FileInfo)">
            <summary>
            Returns <see langword="true"/> if the input <see cref="T:System.IO.FileInfo"/> represents a file exported by Clyde. This tests the header of the file.
            </summary>
            <param name="datFile"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.Utility.VersionInfoScraper.GetCosmeticInformation(System.IO.FileInfo)">
            <summary>
            Returns three <see langword="string"/>, in order, the compression status (as a <see langword="string"/>, "Yes" or "No"), the version name (user friendly), and the implementation.
            </summary>
            <param name="datFile"></param>
            <returns></returns>
        </member>
        <member name="P:ThreeRingsSharp.Utility.XanLogger.Log">
            <summary>
            Intended for exporting the log to a text file. This <see cref="T:System.Text.StringBuilder"/> will contain the entire log.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.XanLogger.BoxReference">
            <summary>
            A reference to a textbox that should store the contents of the log in a GUI application.<para/>
            This should be an instance of <see cref="T:ThreeRingsSharp.Utility.RTFScrolledBottom"/> for proper function. It can be <see langword="null"/> if there is no GUI.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.XanLogger.WasAtBottom">
            <summary>
            If true, the box *was* at the bottom before text was appended to it (meaning it should autoscroll)
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.XanLogger.WriteLine">
            <summary>
            Append a new line to the log.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.Utility.XanLogger.WriteLine(System.String)">
            <summary>
            Append the given text to the log and advance by one line.
            </summary>
            <param name="text"></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ThreeRingsSharp.Utility.XanLogger.Write(System.String)">
            <summary>
            Append the given text to the log.
            </summary>
            <param name="text">The text to write to the log.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="text"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ThreeRingsSharp.Utility.XanLogger.Clear">
            <summary>
            Clears all text from the log. This also wipes <see cref="P:ThreeRingsSharp.Utility.XanLogger.Log"/>.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.Utility.RTFScrolledBottom">
            <summary>
            A variant of <see cref="T:System.Windows.Forms.RichTextBox"/> that provides a means of testing if it is scrolled to the bottom.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.Utility.RTFScrolledBottom.IsScrolledToBottom">
            <summary>
            True if the component is scrolled as far down as possible.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException">
            <summary>
            An exception that is thrown when a critical read error occurs when trying to process files.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException.ErrorWindowTitle">
            <summary>
            The title that should be displayed in the <see cref="T:System.Windows.Forms.MessageBox"/> if this is sent to a GUI.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException.ErrorWindowIcon">
            <summary>
            The icon that should be displayed in the <see cref="T:System.Windows.Forms.MessageBox"/> if this is sent to a GUI.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException.#ctor(System.String,System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Exceptions.ClydeDataReadException"/> with the optional given title and icon, intended for use in GUI displays of this error.
            </summary>
            <param name="message">The message to display for this error.</param>
            <param name="title">The title to display for this error in a GUI.</param>
            <param name="icon">The icon to use in the GUI.</param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Exceptions.InvalidTypeException">
            <summary>
            An exception thrown when a method that handles an arbitrary class type receives a type that is invalid for the given context (but is otherwise within constraints defined by the language)
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.FileUtils">
            <summary>
            Offers better file control methods.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.FileUtils.OpenWriteNew(System.IO.FileInfo)">
            <summary>
            Identical to <see cref="M:System.IO.FileInfo.OpenWrite"/>, but this will completely erase the file and rewrite it from scratch.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter">
            <summary>
            Represents a class that can export data in a specific 3D model format.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.AbstractModelExporter.TOOL">
            <summary>
            A message accompanied with all exports describing the tool used to export the model.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.AbstractModelExporter.Export(ThreeRingsSharp.XansData.Model3D[],System.IO.FileInfo)">
            <summary>
            Exports the data stored in the given <see cref="T:ThreeRingsSharp.XansData.Model3D"/>(s) to the given file.
            </summary>
            <param name="models">The models that should be exported.</param>
            <param name="toFile">The file to write the data to.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.AbstractModelExporter.#ctor">
            <summary>
            A generic constructor for <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/>. Required for the factory to interface with this class properly.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType">
            <summary>
            Represents a component type in glTF for use in accessors.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.BYTE">
            <summary>
            A <see langword="sbyte"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.UNSIGNED_BYTE">
            <summary>
            A <see langword="byte"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.SHORT">
            <summary>
            A <see langword="short"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.UNSIGNED_SHORT">
            <summary>
            A <see langword="ushort"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.UNSIGNED_INT">
            <summary>
            An <see langword="int"/> value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFComponentType.FLOAT">
            <summary>
            A <see langword="float"/> value.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.GLTFType">
            <summary>
            Represents a type in glTF for use in accessors.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.SCALAR">
            <summary>
            A scalar value, which contains a single component.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.VEC2">
            <summary>
            A Vector2 value, which contains 2 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.VEC3">
            <summary>
            A Vector3 value, which contains 3 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.VEC4">
            <summary>
            A Vector4 value, which contains 4 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.MAT2">
            <summary>
            A MAT2 value (2x2 transformation matrix), which contains 4 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.MAT3">
            <summary>
            A MAT3 value (3x3 transformation matrix), which contains 9 components.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFType.MAT4">
            <summary>
            A MAT4 value (4x4 transformation matrix), which contains 16 components.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter">
            <summary>
            Represents a GLTF file and its associated data.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.MAGIC_NUMBER">
            <summary>
            The unique header ID describing glTF files. This is the ASCII string "glTF".
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.VERSION">
            <summary>
            The glTF spec version.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.JSONData">
            <summary>
            The JSON data for this glTF file.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.GetPaddedJSONData">
            <summary>
            Converts <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.JSONData"/> into a JSON String using <see cref="T:Newtonsoft.Json.JsonConvert"/>, and then ensures it's aligned to a four-byte boundary as mandated by glTF 2.0 standards.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.GLTF.GLTFExporter.GetJSONBuffer">
            <summary>
            Returns the fully-formatted JSON data buffer, ready to be written into the file.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.max">
            <summary>
            NOTE: Cast these values into their appropriate type as dictated by <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.componentType"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.min">
            <summary>
            NOTE: Cast these values into their appropriate type as dictated by <see cref="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFAccessor.componentType"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView.buffer">
            <summary>
             The ID of the buffer to browse.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView.byteLength">
            <summary>
            The length of the view in bytes (how many bytes this view "contains")
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.IO.GLTF.JSON.GLTFBufferView.byteOffset">
            <summary>
            The offset of the first byte in this view
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.ModelExporterFactory`1">
            <summary>
            A class that can construct <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/>s. This is used internally for ease of access in <see cref="T:ThreeRingsSharp.XansData.Model3D"/>, and should not be used on its own.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.ModelExporterFactory`1.NewInstance">
            <summary>
            Create a new instance of the given <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/>.
            </summary>
            <returns></returns>
            <exception cref="T:ThreeRingsSharp.XansData.Exceptions.InvalidTypeException">If the user tries to create a <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/> itself.</exception>
        </member>
        <member name="T:ThreeRingsSharp.XansData.IO.OBJExporter">
            <summary>
            Exports model data in the Wavefront OBJ format.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.OBJExporter.WriteVertex(System.Text.StringBuilder,ThreeRingsSharp.XansData.Structs.Vector3)">
            <summary>
            Writes a vertex to the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="objBuilder">A reference to the <see cref="T:System.Text.StringBuilder"/> which is being used to construct the OBJ file.</param>
            <param name="vertex">The <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> to write as a vertex.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.OBJExporter.WriteNormal(System.Text.StringBuilder,ThreeRingsSharp.XansData.Structs.Vector3)">
            <summary>
            Writes a vertex normal to the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="objBuilder">A reference to the <see cref="T:System.Text.StringBuilder"/> which is being used to construct the OBJ file.</param>
            <param name="normal">The <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> to write as a normal.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.OBJExporter.WriteUVCoordinate(System.Text.StringBuilder,ThreeRingsSharp.XansData.Structs.Vector2)">
            <summary>
            Writes a UV Coordinate to the given <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="objBuilder">A reference to the <see cref="T:System.Text.StringBuilder"/> which is being used to construct the OBJ file.</param>
            <param name="uv">The <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> to write as a UV Coordinate</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.IO.OBJExporter.WriteIndexTriplet(System.Text.StringBuilder,System.Collections.Generic.List{System.Int16},System.Int32,System.Int32)">
            <summary>
            Writes the given indices to the given <see cref="T:System.Text.StringBuilder"/>. This adds 1 to all of the indices so that they are compliant with OBJ standards.
            </summary>
            <param name="objBuilder">A reference to the <see cref="T:System.Text.StringBuilder"/> which is being used to construct the OBJ file.</param>
            <param name="indices">The list of indices for this 3D model.</param>
            <param name="tripletStartIndex">An index multiplied by 3 to represent where to get a triplet from (so an index of 0 would be indices[0], [1], and [2], and an index of 1 would be [3], [4], and [5])</param>
            <param name="indexOffset">The value to offset geometry indices by.</param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.EnumerableExtension">
            <summary>
            Provides methods that are nice for <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.EnumerableExtension.SetFrom``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sets the contents of the given <see cref="T:System.Collections.Generic.List`1"/> to the given content.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="values"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.EnumerableExtension.As2D``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Converts this <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a 2D array of <typeparamref name="T"/>, where the second dimension's size is <paramref name="groupSize"/>. For instance, calling this on an array of 16 items with an argument of 8 will return a 2D array with 2 elements in the first dimension, and 8 in the second dimension.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="groupSize">The size of the second dimension of the array.</param>
            <returns></returns>
            <exception cref="T:System.DataMisalignedException">Thrown if the length of the given <paramref name="enumerable"/> is not divisible by <paramref name="groupSize"/>.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.EnumerableExtension.GetSecondDimensionAt``1(``0[0:,0:],System.Int32)">
            <summary>
            Given an <paramref name="index"/>, this will return the second dimension of the 2D array. If the 2D array were constructed as an array of arrays, this would be the equivalent to getting array[x] in array[x][y].
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array2D"></param>
            <param name="index">The index in the first dimension corresponding to the desired second dimension.</param>
            <returns></returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the given index is out of the range fo the array.</exception>
        </member>
        <member name="M:ThreeRingsSharp.XansData.EnumerableExtension.ToIntArray(System.Single[])">
            <summary>
            A very specialized method designed specifically for <see cref="T:ThreeRingsSharp.DataHandlers.Model.GeometryConfigTranslator"/> which converts a float array to an int array.
            </summary>
            <param name="floatArray"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.EnumerableExtension.CopyToList``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Similar to <see cref="M:System.Array.CopyTo(System.Array,System.Int32)"/> but for <see cref="T:System.Collections.Generic.List`1"/>s.<para/>
            If the offset is larger than the size of the list, the empty space will be filled with <see langword="default"/>.<para/>
            If the offset is somewhere within the list, it will overwrite elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="list"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.EnumerableExtension.SetListCap``1(System.Collections.Generic.List{System.Object},``0,System.Int32)">
            <summary>
            A utility designed exclusively for the glTF exporter which can populate a list with the given default value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="defaultValue"></param>
            <param name="values"></param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.ModelFormat">
            <summary>
            Represents a format type for 3D models.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.ModelFormat.FBX">
            <summary>
            The Autodesk FBX Format
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.ModelFormat.OBJ">
            <summary>
            WaveFront OBJ Format
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.ModelFormat.GLTF">
            <summary>
            Graphics Library Transmission Format
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.ModelFormatUtil.ExtensionToFormatBindings">
            <summary>
            A binding from <see cref="T:System.String"/> to <see cref="T:ThreeRingsSharp.XansData.ModelFormat"/>, e.g. the string <c>".fbx"</c> translates to <see cref="F:ThreeRingsSharp.XansData.ModelFormat.FBX"/>.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Singleton`1">
            <summary>
            When extended, a property named <c>Instance</c> is statically provided for the given type that references an instance of said type.
            </summary>
            <typeparam name="T">The type of the singleton instance.</typeparam>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Singleton`1.Instance">
            <summary>
            A reference to the singleton instance of this class.
            </summary>
        </member>
        <member name="T:ThreeRingsSharp.XansData.StringExtension">
            <summary>
            Provides some handy extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.StringExtension.AfterIndexOf(System.String,System.String)">
            <summary>
            Returns a <see langword="string"/> of everything after the first located instance of <paramref name="text"/>. This does not include the sequence. For instance, if the text <c>cool.beans.nice.meme</c> is input and the method is called with a parameter of <c>nice.</c> for <paramref name="text"/>, the return value will be <c>meme</c><para/>
            Returns <see langword="null"/> if <paramref name="text"/> could not be found.
            </summary>
            <param name="str">The string to search.</param>
            <param name="text">The text to locate.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.StringExtension.AfterLastIndexOf(System.String,System.String)">
            <summary>
            Returns a <see langword="string"/> of everything after the last located instance of <paramref name="text"/>. This does not include the sequence. For instance, if the text <c>cool.beans.nice.meme</c> is input and the method is called with a parameter of <c>nice.</c> for <paramref name="text"/>, the return value will be <c>meme</c><para/>
            Returns <see langword="null"/> if <paramref name="text"/> could not be found.
            </summary>
            <param name="str">The string to search.</param>
            <param name="text">The text to locate.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.StringExtension.IsAlphanumeric(System.String)">
            <summary>
            Returns true if the string is alphanumeric, or, if it is within the range of a-z, A-Z, and 0-9.
            </summary>
            <param name="inp"></param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.StringExtension.WriteASCIIToByteArray(System.String,System.Byte[]@,System.Int32)">
            <summary>
            Formats the given string to an ASCII string and then writes it to the array, starting at the given offset.<para/>
            Throws <see cref="T:System.IndexOutOfRangeException"/> if the array is too short to contain the string.
            </summary>
            <param name="str">The string to write.</param>
            <param name="array">The array to write the string into.</param>
            <param name="offset">The index to start writing at.</param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Structs.Vector2">
            <summary>
            Stores three <see langword="float"/> values that represent a coordinate in 3D space.<para/>
            Unlike <see cref="T:System.Numerics.Vector2"/>, this does not contain any vector math methods. This is strictly for data storage.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector2.X">
            <summary>
            The X component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> which generally represents left or right positions relative to the world.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector2.Y">
            <summary>
            The Y component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> which generally represents upward or downward positions relative to the world.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Construct a new Vector3 with the given X, Y, and Z coordinates.
            </summary>
            <param name="x">The X component of this Vector3.</param>
            <param name="y">The Y component of this Vector3.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector2.FromFloatArray(System.Single[])">
            <summary>
            Returns a list of <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/>s composed of the given float array, taking each value out in pairs.<para/>
            Throws <see cref="T:System.DataMisalignedException"/> if the float array's length is not divisible by two.
            </summary>
            <param name="values">The float array to be translated into a <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> array.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector2.ToString">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector2"/> into a string where each component is separated by a single space: <c>X Y</c>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Structs.Vector3">
            <summary>
            Stores three <see langword="float"/> values that represent a coordinate in 3D space.<para/>
            Unlike <see cref="T:System.Numerics.Vector3"/>, this does not contain any vector math methods. This is strictly for data storage.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector3.X">
            <summary>
            The X component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> which generally represents left or right positions relative to the world.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector3.Y">
            <summary>
            The Y component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> which generally represents upward or downward positions relative to the world.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vector3.Z">
            <summary>
            The Z component of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> which generally represents forward or backward positions relative to the world.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> with the given X, Y, and Z coordinates.
            </summary>
            <param name="x">The X component of this Vector3.</param>
            <param name="y">The Y component of this Vector3.</param>
            <param name="z">The Z component of this Vector3.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector3.FromFloatArray(System.Single[])">
            <summary>
            Returns a list of <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/>s composed of the given float array, taking each value out in triplets.<para/>
            Throws <see cref="T:System.DataMisalignedException"/> if the float array's length is not divisible by three.
            </summary>
            <param name="values">The float array to be translated into a <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> array.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vector3.ToString">
            <summary>
            Converts this <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> into a string where each component is separated by a single space: <c>X Y Z</c>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Structs.Vertex">
            <summary>
            Represents a vertex, which is effectively identical to a <see cref="T:ThreeRingsSharp.XansData.Structs.Vector3"/> with a Weight value.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vertex.Point">
            <summary>
            The location of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> in 3D space.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Structs.Vertex.Weight">
            <summary>
            The weight of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> in the context of bone groups.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vertex.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> with the given X, Y, and Z coordinates and weight.
            </summary>
            <param name="x">The X component of this Vector3.</param>
            <param name="y">The Y component of this Vector3.</param>
            <param name="z">The Z component of this Vector3.</param>
            <param name="weight">The weight of this vertex in the context of any associated bone data.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vertex.#ctor(ThreeRingsSharp.XansData.Structs.Vector3,System.Single)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> from the given point and weight.
            </summary>
            <param name="point">The location of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> in 3D space.</param>
            <param name="weight">The weight of this <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> in the context of any associated bone data.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vertex.FromFloatArray(System.Single[],System.Single)">
            <summary>
            Returns a list of <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/>s composed of the given float array, taking each value out in triplets. The weight of each <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> will be set to <paramref name="defaultWeight"/>.<para/>
            Throws <see cref="T:System.DataMisalignedException"/> if the float array's length is not divisible by three.
            </summary>
            <param name="values">The float array to be translated into a <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> array.</param>
            <param name="defaultWeight">The weight to give to each vertex, which is used in the context of bone information.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.Vertex.FromFloatArray(System.Single[],System.Single[])">
            <summary>
            Returns a list of <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/>s composed of the given float array, taking each value out in triplets.<para/>
            Throws <see cref="T:System.DataMisalignedException"/> if the float array's length is not divisible by three, or if the length of the weight array isn't the same as the result <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> array.
            </summary>
            <param name="values">The float array to be translated into a <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> array.</param>
            <param name="weights">A list of the weights to give the resulting <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> instances.</param>
            <returns></returns>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Structs.VertexGroup">
            <summary>
            Represents a vertex group, which is used for rigged models. All stored vertices simply represent a vertex that has a weight in a given bone group. As such, if a vertex has a weight value less than 1, it will be a duplicate of at least one other vertex in one other vertex group.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Structs.VertexGroup.Vertices">
            <summary>
            All of the vertices stored in this VertexGroup. These ARE unique objects (not unique positions in space) since this is a representation of bone data. If you need to access the full geometry (and not every vertex used by a given bone), do it through <see cref="F:ThreeRingsSharp.XansData.Model3D.Vertices"/>, since these vertices are not affected by transforms which may drastically malform the output.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Structs.VertexGroup.Indices">
            <summary>
            The indices in this vertex group. These refer to the triangles in this <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/>, but are the indices used by the whole model otherwise.<para/>
            Please note that certain indices in this array may be duplicated (or, the same exact index will appear up to 4 times in a row). If this is the case, ignore subsequent instances of the same number. For instance, this array may contain <c>1 2 2 2 3 3 4</c>, and should turn into <c>1 2 3 4</c> after you trim it yourself.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Structs.VertexGroup.Name">
            <summary>
            The name of this vertex group, which should be identical to the node it corresponds to.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.VertexGroup.#ctor">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/> with default properties.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Structs.VertexGroup.#ctor(System.String)">
            <summary>
            Construct a new <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/> with the given name.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:ThreeRingsSharp.XansData.Model3D">
            <summary>
            A unified representation of a model. Since various implementations from Clyde may store data differently, this provides a common interface.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.ExporterBindings">
            <summary>
            A list of bindings from <see cref="T:ThreeRingsSharp.XansData.ModelFormat"/>s to a singleton of their applicable <see cref="T:ThreeRingsSharp.XansData.IO.AbstractModelExporter"/>.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.Name">
            <summary>
            The display name for this model, used in exporting (i.e. this is the name that will show up in Blender or any other modelling software.)
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.Source">
            <summary>
            A reference to the file that the model here came from. This is used to reference textures and other path-dependent extra data.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.Transform">
            <summary>
            The transformation to apply to the model data. By default, this is the identity transformation (so no transform).
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.HasDoneTransformation">
            <summary>
            If true, then <see cref="P:ThreeRingsSharp.XansData.Model3D.Transform"/> has been applied to all <see cref="F:ThreeRingsSharp.XansData.Model3D.Vertices"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.Vertices">
            <summary>
            The vertices that make up this 3D model. Generally speaking, this should be used if the model is not rigged.<para/>
            Consider using <see cref="F:ThreeRingsSharp.XansData.Model3D.VertexGroups"/> to access the geometry of rigged models, do mind some vertices may be duplicated.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.Normals">
            <summary>
            The normals that make up this 3D model.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.UVs">
            <summary>
            The UV coordinates.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.Indices">
            <summary>
            The indices that define triangles.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.VertexGroups">
            <summary>
            All of the vertex groups in this model, represented as a list of indices. These indices reference <see cref="F:ThreeRingsSharp.XansData.Model3D.Vertices"/>.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.BoneNames">
            <summary>
            A list of every bone name in this model. Unlike the list provided in Clyde geometry, the first element (index 0) of this list is null.<para/>
            This allows easier bone indexing when observing vertex groups since all that needs to be done is testing if the name is null (0 denotes "not in a bone group")
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.BoneIndices">
            <summary>
            The indices for bones. These correspond to an entry in the modified <see cref="F:ThreeRingsSharp.XansData.Model3D.BoneNames"/> list.<para/>
            If you need to find the bone for a given vertex, search <see cref="F:ThreeRingsSharp.XansData.Model3D.VertexGroups"/> instead, as <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/>s contain bindings to bones.
            </summary>
        </member>
        <member name="F:ThreeRingsSharp.XansData.Model3D.BoneWeights">
            <summary>
            The weights for bones.<para/>
            If you need to find the weight of a vertex for a given bone, search <see cref="F:ThreeRingsSharp.XansData.Model3D.VertexGroups"/> instead.
            </summary>
        </member>
        <member name="P:ThreeRingsSharp.XansData.Model3D.HasBoneData">
            <summary>
            This should be <see langword="true"/> if this has bone data. If it is false, <see cref="M:ThreeRingsSharp.XansData.Model3D.ConstructGroups"/> will not do anything.<para/>
            Ensure this is only set to <see langword="true"/> if <see cref="F:ThreeRingsSharp.XansData.Model3D.BoneNames"/>, <see cref="F:ThreeRingsSharp.XansData.Model3D.BoneIndices"/>, and <see cref="F:ThreeRingsSharp.XansData.Model3D.BoneWeights"/> are all populated properly.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.Export(System.IO.FileInfo,ThreeRingsSharp.XansData.ModelFormat)">
            <summary>
            Exports this model in a given format, writing the data to the target <see cref="T:System.IO.FileInfo"/>
            </summary>
            <param name="targetFile">The file that will be written to.</param>
            <param name="targetFormat">The file format to use for the 3D model.</param>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.ApplyTransformations">
            <summary>
            Takes <see cref="P:ThreeRingsSharp.XansData.Model3D.Transform"/> and applies it to <see cref="F:ThreeRingsSharp.XansData.Model3D.Vertices"/>, as well as every <see cref="T:ThreeRingsSharp.XansData.Structs.Vertex"/> in each individual <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/>. This also normalizes the weights of vertices across all vertex groups.<para/>
            This can only be called once.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.Dispose">
            <summary>
            Frees all information used by this <see cref="T:ThreeRingsSharp.XansData.Model3D"/>.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.GetVertexGroupByName(System.String)">
            <summary>
            Iterates through <see cref="F:ThreeRingsSharp.XansData.Model3D.VertexGroups"/> and returns the first <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/> whose <see cref="P:ThreeRingsSharp.XansData.Structs.VertexGroup.Name"/> is equal to <paramref name="name"/>, or <see langword="null"/> if one could not be found.
            </summary>
            <param name="name">The name to search for.</param>
            <returns></returns>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.ConstructGroups">
            <summary>
            Constructs all <see cref="T:ThreeRingsSharp.XansData.Structs.VertexGroup"/> instances automatically.
            </summary>
        </member>
        <member name="M:ThreeRingsSharp.XansData.Model3D.ExportIntoOne(System.IO.FileInfo,ThreeRingsSharp.XansData.ModelFormat,ThreeRingsSharp.XansData.Model3D[])">
            <summary>
            Exports the given <see cref="T:ThreeRingsSharp.XansData.Model3D"/> instances into a single file.
            </summary>
            <param name="targetFile"></param>
            <param name="targetFormat"></param>
            <param name="models"></param>
        </member>
    </members>
</doc>
